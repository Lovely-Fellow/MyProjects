if (self.CavalryLogger) { CavalryLogger.start_js(["Y8SxR"]); }

__d("MqttWsClient",["MqttLogger","MqttTypes","paho-mqtt"],(function(a,b,c,d,e,f){"use strict";__p&&__p();var g=b("MqttTypes").ConnectFailure,h=b("MqttTypes").MqttError,i=function(a){};function a(a){this.$2=a,this.$3=b("MqttLogger").getInstance(),this.$1=new(b("paho-mqtt").Client)(this.$2,"mqttwsclient"),this.$4={}}a.prototype.connect=function(a){__p&&__p();this.$4=a,this.$1.onConnectionLost=function(b){a.onConnectionLost(new h(b.errorCode,b.errorMessage))},this.$1.onMessageArrived=function(b){try{var c=b.destinationName;this.$3.bumpCounter("message_arrived.ws."+c);a.onMessageArrived(c,b.payloadString)}catch(a){this.$3.logError(a,"Unable to parse message");this.$3.bumpCounter((c="error_processing_message."+b.destinationName)!=null?c:"null")}}.bind(this),this.$1.onMessageDelivered=function(b,c){return a.onMessageDelivered(b,c)},this.$1.connect({userName:a.userName,mqttVersion:a.mqttVersion,keepAliveInterval:a.keepAliveInterval,onFailure:function(b){if(b!=null){var c=new h(b.errorCode,b.errorMessage);c=new g(c,b.connack)}else c=new g(new h(1,"No ResponseObject"),-1);a.onConnectFailure(c)},onSuccess:function(){return a.onConnectSuccess()},ignoreSubProtocol:a.ignoreSubProtocol,onSocketOpen:function(){return a.onConnection()},onSocketError:function(b){return a.onConnectionError(b)}})};a.prototype.unsubscribe=function(a){this.$1.unsubscribe(a)};a.prototype.subscribe=function(a){this.$1.subscribe(a,{})};a.prototype.publish=function(a,b,c){return this.$1.publish(a,b,c,!1)};a.prototype.isConnected=function(){return this.$1.isConnected()};a.prototype.disconnect=function(){this.$4!=null&&(this.$4.onConnectSuccess=i,this.$4.onConnectFailure=i,this.$4.onConnection=i,this.$4.onConnectionError=i,this.$4.onMessageArrived=i,this.$4.onMessageDelivered=i),this.$1.connectOptions!=null&&(this.$1.connectOptions.onConnectSuccess=i,this.$1.connectOptions.onConnectFailure=i,this.$1.connectOptions.onConnection=i,this.$1.connectOptions.onConnectionError=i,this.$1.connectOptions.onMessageArrived=i,this.$1.connectOptions.onMessageDelivered=i),this.isConnected()&&this.$1.disconnect()};e.exports=a}),null);