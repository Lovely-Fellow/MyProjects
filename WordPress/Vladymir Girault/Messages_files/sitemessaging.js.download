//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

(function () {

    var charts = angular.module('vendor.thrift.sitemessaging', ['components.core.thrift']);

    charts.factory('eoSMASModelsThrift', ['Thrift', function (Thrift) {

        if (typeof agora === 'undefined') {
            agora = {};
        }
        if (typeof agora.thrift === 'undefined') {
            agora.thrift = {};
        }
        if (typeof agora.thrift.eoSMAS === 'undefined') {
            agora.thrift.eoSMAS = {};
        }

        agora.thrift.eoSMAS.TViewerType = {
            'PERSON' : 0,
            'VISITOR' : 1
        };

        agora.thrift.eoSMAS.TMessageTemplate = function(args) {
            this.uid = null;
            this.name = null;
            this.viewerType = null;
            this.enabled = null;
            this.severity = null;
            this.priority = null;
            this.content = null;
            this.title = null;
            this.maxDisplaySessionsEnabled = null;
            this.maxDisplaySessions = null;
            this.displayStart = null;
            this.displayEnd = null;
            this.daysToReappearEnabled = null;
            this.daysToReappear = null;
            this.dismissible = null;
            this.owner = null;
            this.notes = null;
            this.ruleExpression = null;
            this.displayLocation = null;
            this.isGlobalContext = null;
            this.contextConstraint = null;
            this.numOfDisplays = null;
            this.numOfViewerDisplays = null;
            if (args) {
                if (args.uid !== undefined) {
                    this.uid = args.uid;
                }
                if (args.name !== undefined) {
                    this.name = args.name;
                }
                if (args.viewerType !== undefined) {
                    this.viewerType = args.viewerType;
                }
                if (args.enabled !== undefined) {
                    this.enabled = args.enabled;
                }
                if (args.severity !== undefined) {
                    this.severity = args.severity;
                }
                if (args.priority !== undefined) {
                    this.priority = args.priority;
                }
                if (args.content !== undefined) {
                    this.content = args.content;
                }
                if (args.title !== undefined) {
                    this.title = args.title;
                }
                if (args.maxDisplaySessionsEnabled !== undefined) {
                    this.maxDisplaySessionsEnabled = args.maxDisplaySessionsEnabled;
                }
                if (args.maxDisplaySessions !== undefined) {
                    this.maxDisplaySessions = args.maxDisplaySessions;
                }
                if (args.displayStart !== undefined) {
                    this.displayStart = args.displayStart;
                }
                if (args.displayEnd !== undefined) {
                    this.displayEnd = args.displayEnd;
                }
                if (args.daysToReappearEnabled !== undefined) {
                    this.daysToReappearEnabled = args.daysToReappearEnabled;
                }
                if (args.daysToReappear !== undefined) {
                    this.daysToReappear = args.daysToReappear;
                }
                if (args.dismissible !== undefined) {
                    this.dismissible = args.dismissible;
                }
                if (args.owner !== undefined) {
                    this.owner = args.owner;
                }
                if (args.notes !== undefined) {
                    this.notes = args.notes;
                }
                if (args.ruleExpression !== undefined) {
                    this.ruleExpression = args.ruleExpression;
                }
                if (args.displayLocation !== undefined) {
                    this.displayLocation = args.displayLocation;
                }
                if (args.isGlobalContext !== undefined) {
                    this.isGlobalContext = args.isGlobalContext;
                }
                if (args.contextConstraint !== undefined) {
                    this.contextConstraint = args.contextConstraint;
                }
                if (args.numOfDisplays !== undefined) {
                    this.numOfDisplays = args.numOfDisplays;
                }
                if (args.numOfViewerDisplays !== undefined) {
                    this.numOfViewerDisplays = args.numOfViewerDisplays;
                }
            }
        };
        agora.thrift.eoSMAS.TMessageTemplate.prototype = {};
        agora.thrift.eoSMAS.TMessageTemplate.prototype.read = function(input) {
            input.readStructBegin();
            while (true)
            {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                    break;
                }
                switch (fid)
                {
                    case 1:
                        if (ftype == Thrift.Type.STRING) {
                            this.uid = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 2:
                        if (ftype == Thrift.Type.STRING) {
                            this.name = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 3:
                        if (ftype == Thrift.Type.I32) {
                            this.viewerType = input.readI32().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 4:
                        if (ftype == Thrift.Type.BOOL) {
                            this.enabled = input.readBool().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 5:
                        if (ftype == Thrift.Type.STRING) {
                            this.severity = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 6:
                        if (ftype == Thrift.Type.I32) {
                            this.priority = input.readI32().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 7:
                        if (ftype == Thrift.Type.STRING) {
                            this.content = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 8:
                        if (ftype == Thrift.Type.STRING) {
                            this.title = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 9:
                        if (ftype == Thrift.Type.BOOL) {
                            this.maxDisplaySessionsEnabled = input.readBool().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 10:
                        if (ftype == Thrift.Type.I32) {
                            this.maxDisplaySessions = input.readI32().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 11:
                        if (ftype == Thrift.Type.STRING) {
                            this.displayStart = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 12:
                        if (ftype == Thrift.Type.STRING) {
                            this.displayEnd = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 13:
                        if (ftype == Thrift.Type.BOOL) {
                            this.daysToReappearEnabled = input.readBool().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 14:
                        if (ftype == Thrift.Type.I32) {
                            this.daysToReappear = input.readI32().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 15:
                        if (ftype == Thrift.Type.BOOL) {
                            this.dismissible = input.readBool().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 16:
                        if (ftype == Thrift.Type.STRING) {
                            this.owner = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 17:
                        if (ftype == Thrift.Type.STRING) {
                            this.notes = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 18:
                        if (ftype == Thrift.Type.STRING) {
                            this.ruleExpression = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 19:
                        if (ftype == Thrift.Type.STRING) {
                            this.displayLocation = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 20:
                        if (ftype == Thrift.Type.BOOL) {
                            this.isGlobalContext = input.readBool().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 21:
                        if (ftype == Thrift.Type.STRING) {
                            this.contextConstraint = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 22:
                        if (ftype == Thrift.Type.I64) {
                            this.numOfDisplays = input.readI64().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 23:
                        if (ftype == Thrift.Type.I64) {
                            this.numOfViewerDisplays = input.readI64().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    default:
                        input.skip(ftype);
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        };

        agora.thrift.eoSMAS.TMessageTemplate.prototype.write = function(output) {
            output.writeStructBegin('agora.thrift.eoSMAS.TMessageTemplate');
            if (this.uid !== null && this.uid !== undefined) {
                output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
                output.writeString(this.uid);
                output.writeFieldEnd();
            }
            if (this.name !== null && this.name !== undefined) {
                output.writeFieldBegin('name', Thrift.Type.STRING, 2);
                output.writeString(this.name);
                output.writeFieldEnd();
            }
            if (this.viewerType !== null && this.viewerType !== undefined) {
                output.writeFieldBegin('viewerType', Thrift.Type.I32, 3);
                output.writeI32(this.viewerType);
                output.writeFieldEnd();
            }
            if (this.enabled !== null && this.enabled !== undefined) {
                output.writeFieldBegin('enabled', Thrift.Type.BOOL, 4);
                output.writeBool(this.enabled);
                output.writeFieldEnd();
            }
            if (this.severity !== null && this.severity !== undefined) {
                output.writeFieldBegin('severity', Thrift.Type.STRING, 5);
                output.writeString(this.severity);
                output.writeFieldEnd();
            }
            if (this.priority !== null && this.priority !== undefined) {
                output.writeFieldBegin('priority', Thrift.Type.I32, 6);
                output.writeI32(this.priority);
                output.writeFieldEnd();
            }
            if (this.content !== null && this.content !== undefined) {
                output.writeFieldBegin('content', Thrift.Type.STRING, 7);
                output.writeString(this.content);
                output.writeFieldEnd();
            }
            if (this.title !== null && this.title !== undefined) {
                output.writeFieldBegin('title', Thrift.Type.STRING, 8);
                output.writeString(this.title);
                output.writeFieldEnd();
            }
            if (this.maxDisplaySessionsEnabled !== null && this.maxDisplaySessionsEnabled !== undefined) {
                output.writeFieldBegin('maxDisplaySessionsEnabled', Thrift.Type.BOOL, 9);
                output.writeBool(this.maxDisplaySessionsEnabled);
                output.writeFieldEnd();
            }
            if (this.maxDisplaySessions !== null && this.maxDisplaySessions !== undefined) {
                output.writeFieldBegin('maxDisplaySessions', Thrift.Type.I32, 10);
                output.writeI32(this.maxDisplaySessions);
                output.writeFieldEnd();
            }
            if (this.displayStart !== null && this.displayStart !== undefined) {
                output.writeFieldBegin('displayStart', Thrift.Type.STRING, 11);
                output.writeString(this.displayStart);
                output.writeFieldEnd();
            }
            if (this.displayEnd !== null && this.displayEnd !== undefined) {
                output.writeFieldBegin('displayEnd', Thrift.Type.STRING, 12);
                output.writeString(this.displayEnd);
                output.writeFieldEnd();
            }
            if (this.daysToReappearEnabled !== null && this.daysToReappearEnabled !== undefined) {
                output.writeFieldBegin('daysToReappearEnabled', Thrift.Type.BOOL, 13);
                output.writeBool(this.daysToReappearEnabled);
                output.writeFieldEnd();
            }
            if (this.daysToReappear !== null && this.daysToReappear !== undefined) {
                output.writeFieldBegin('daysToReappear', Thrift.Type.I32, 14);
                output.writeI32(this.daysToReappear);
                output.writeFieldEnd();
            }
            if (this.dismissible !== null && this.dismissible !== undefined) {
                output.writeFieldBegin('dismissible', Thrift.Type.BOOL, 15);
                output.writeBool(this.dismissible);
                output.writeFieldEnd();
            }
            if (this.owner !== null && this.owner !== undefined) {
                output.writeFieldBegin('owner', Thrift.Type.STRING, 16);
                output.writeString(this.owner);
                output.writeFieldEnd();
            }
            if (this.notes !== null && this.notes !== undefined) {
                output.writeFieldBegin('notes', Thrift.Type.STRING, 17);
                output.writeString(this.notes);
                output.writeFieldEnd();
            }
            if (this.ruleExpression !== null && this.ruleExpression !== undefined) {
                output.writeFieldBegin('ruleExpression', Thrift.Type.STRING, 18);
                output.writeString(this.ruleExpression);
                output.writeFieldEnd();
            }
            if (this.displayLocation !== null && this.displayLocation !== undefined) {
                output.writeFieldBegin('displayLocation', Thrift.Type.STRING, 19);
                output.writeString(this.displayLocation);
                output.writeFieldEnd();
            }
            if (this.isGlobalContext !== null && this.isGlobalContext !== undefined) {
                output.writeFieldBegin('isGlobalContext', Thrift.Type.BOOL, 20);
                output.writeBool(this.isGlobalContext);
                output.writeFieldEnd();
            }
            if (this.contextConstraint !== null && this.contextConstraint !== undefined) {
                output.writeFieldBegin('contextConstraint', Thrift.Type.STRING, 21);
                output.writeString(this.contextConstraint);
                output.writeFieldEnd();
            }
            if (this.numOfDisplays !== null && this.numOfDisplays !== undefined) {
                output.writeFieldBegin('numOfDisplays', Thrift.Type.I64, 22);
                output.writeI64(this.numOfDisplays);
                output.writeFieldEnd();
            }
            if (this.numOfViewerDisplays !== null && this.numOfViewerDisplays !== undefined) {
                output.writeFieldBegin('numOfViewerDisplays', Thrift.Type.I64, 23);
                output.writeI64(this.numOfViewerDisplays);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        };

        agora.thrift.eoSMAS.TMessageTemplateList = function(args) {
            this.templates = null;
            this.totalCount = null;
            if (args) {
                if (args.templates !== undefined) {
                    this.templates = args.templates;
                }
                if (args.totalCount !== undefined) {
                    this.totalCount = args.totalCount;
                }
            }
        };
        agora.thrift.eoSMAS.TMessageTemplateList.prototype = {};
        agora.thrift.eoSMAS.TMessageTemplateList.prototype.read = function(input) {
            input.readStructBegin();
            while (true)
            {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                    break;
                }
                switch (fid)
                {
                    case 1:
                        if (ftype == Thrift.Type.LIST) {
                            var _size0 = 0;
                            var _rtmp34;
                            this.templates = [];
                            var _etype3 = 0;
                            _rtmp34 = input.readListBegin();
                            _etype3 = _rtmp34.etype;
                            _size0 = _rtmp34.size;
                            for (var _i5 = 0; _i5 < _size0; ++_i5)
                            {
                                var elem6 = null;
                                elem6 = new agora.thrift.eoSMAS.TMessageTemplate();
                                elem6.read(input);
                                this.templates.push(elem6);
                            }
                            input.readListEnd();
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 2:
                        if (ftype == Thrift.Type.I32) {
                            this.totalCount = input.readI32().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    default:
                        input.skip(ftype);
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        };

        agora.thrift.eoSMAS.TMessageTemplateList.prototype.write = function(output) {
            output.writeStructBegin('agora.thrift.eoSMAS.TMessageTemplateList');
            if (this.templates !== null && this.templates !== undefined) {
                output.writeFieldBegin('templates', Thrift.Type.LIST, 1);
                output.writeListBegin(Thrift.Type.STRUCT, this.templates.length);
                for (var iter7 in this.templates)
                {
                    if (this.templates.hasOwnProperty(iter7))
                    {
                        iter7 = this.templates[iter7];
                        iter7.write(output);
                    }
                }
                output.writeListEnd();
                output.writeFieldEnd();
            }
            if (this.totalCount !== null && this.totalCount !== undefined) {
                output.writeFieldBegin('totalCount', Thrift.Type.I32, 2);
                output.writeI32(this.totalCount);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        };

        agora.thrift.eoSMAS.TUid = function(args) {
            this.uid = null;
            if (args) {
                if (args.uid !== undefined) {
                    this.uid = args.uid;
                }
            }
        };
        agora.thrift.eoSMAS.TUid.prototype = {};
        agora.thrift.eoSMAS.TUid.prototype.read = function(input) {
            input.readStructBegin();
            while (true)
            {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                    break;
                }
                switch (fid)
                {
                    case 1:
                        if (ftype == Thrift.Type.STRING) {
                            this.uid = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 0:
                        input.skip(ftype);
                        break;
                    default:
                        input.skip(ftype);
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        };

        agora.thrift.eoSMAS.TUid.prototype.write = function(output) {
            output.writeStructBegin('agora.thrift.eoSMAS.TUid');
            if (this.uid !== null && this.uid !== undefined) {
                output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
                output.writeString(this.uid);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        };

        agora.thrift.eoSMAS.TMessage = function(args) {
            this.templateUid = null;
            this.viewerType = null;
            this.viewerUid = null;
            this.content = null;
            this.title = null;
            this.dismissible = null;
            this.severity = null;
            this.displayLocation = null;
            if (args) {
                if (args.templateUid !== undefined) {
                    this.templateUid = args.templateUid;
                }
                if (args.viewerType !== undefined) {
                    this.viewerType = args.viewerType;
                }
                if (args.viewerUid !== undefined) {
                    this.viewerUid = args.viewerUid;
                }
                if (args.content !== undefined) {
                    this.content = args.content;
                }
                if (args.title !== undefined) {
                    this.title = args.title;
                }
                if (args.dismissible !== undefined) {
                    this.dismissible = args.dismissible;
                }
                if (args.severity !== undefined) {
                    this.severity = args.severity;
                }
                if (args.displayLocation !== undefined) {
                    this.displayLocation = args.displayLocation;
                }
            }
        };
        agora.thrift.eoSMAS.TMessage.prototype = {};
        agora.thrift.eoSMAS.TMessage.prototype.read = function(input) {
            input.readStructBegin();
            while (true)
            {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                    break;
                }
                switch (fid)
                {
                    case 1:
                        if (ftype == Thrift.Type.STRING) {
                            this.templateUid = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 2:
                        if (ftype == Thrift.Type.I32) {
                            this.viewerType = input.readI32().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 3:
                        if (ftype == Thrift.Type.STRING) {
                            this.viewerUid = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 4:
                        if (ftype == Thrift.Type.STRING) {
                            this.content = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 5:
                        if (ftype == Thrift.Type.STRING) {
                            this.title = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 6:
                        if (ftype == Thrift.Type.BOOL) {
                            this.dismissible = input.readBool().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 7:
                        if (ftype == Thrift.Type.STRING) {
                            this.severity = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 8:
                        if (ftype == Thrift.Type.STRING) {
                            this.displayLocation = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    default:
                        input.skip(ftype);
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        };

        agora.thrift.eoSMAS.TMessage.prototype.write = function(output) {
            output.writeStructBegin('agora.thrift.eoSMAS.TMessage');
            if (this.templateUid !== null && this.templateUid !== undefined) {
                output.writeFieldBegin('templateUid', Thrift.Type.STRING, 1);
                output.writeString(this.templateUid);
                output.writeFieldEnd();
            }
            if (this.viewerType !== null && this.viewerType !== undefined) {
                output.writeFieldBegin('viewerType', Thrift.Type.I32, 2);
                output.writeI32(this.viewerType);
                output.writeFieldEnd();
            }
            if (this.viewerUid !== null && this.viewerUid !== undefined) {
                output.writeFieldBegin('viewerUid', Thrift.Type.STRING, 3);
                output.writeString(this.viewerUid);
                output.writeFieldEnd();
            }
            if (this.content !== null && this.content !== undefined) {
                output.writeFieldBegin('content', Thrift.Type.STRING, 4);
                output.writeString(this.content);
                output.writeFieldEnd();
            }
            if (this.title !== null && this.title !== undefined) {
                output.writeFieldBegin('title', Thrift.Type.STRING, 5);
                output.writeString(this.title);
                output.writeFieldEnd();
            }
            if (this.dismissible !== null && this.dismissible !== undefined) {
                output.writeFieldBegin('dismissible', Thrift.Type.BOOL, 6);
                output.writeBool(this.dismissible);
                output.writeFieldEnd();
            }
            if (this.severity !== null && this.severity !== undefined) {
                output.writeFieldBegin('severity', Thrift.Type.STRING, 7);
                output.writeString(this.severity);
                output.writeFieldEnd();
            }
            if (this.displayLocation !== null && this.displayLocation !== undefined) {
                output.writeFieldBegin('displayLocation', Thrift.Type.STRING, 8);
                output.writeString(this.displayLocation);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        };

        agora.thrift.eoSMAS.TLocationsList = function(args) {
            this.locations = null;
            if (args) {
                if (args.locations !== undefined) {
                    this.locations = args.locations;
                }
            }
        };
        agora.thrift.eoSMAS.TLocationsList.prototype = {};
        agora.thrift.eoSMAS.TLocationsList.prototype.read = function(input) {
            input.readStructBegin();
            while (true)
            {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                    break;
                }
                switch (fid)
                {
                    case 1:
                        if (ftype == Thrift.Type.LIST) {
                            var _size8 = 0;
                            var _rtmp312;
                            this.locations = [];
                            var _etype11 = 0;
                            _rtmp312 = input.readListBegin();
                            _etype11 = _rtmp312.etype;
                            _size8 = _rtmp312.size;
                            for (var _i13 = 0; _i13 < _size8; ++_i13)
                            {
                                var elem14 = null;
                                elem14 = input.readString().value;
                                this.locations.push(elem14);
                            }
                            input.readListEnd();
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 0:
                        input.skip(ftype);
                        break;
                    default:
                        input.skip(ftype);
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        };

        agora.thrift.eoSMAS.TLocationsList.prototype.write = function(output) {
            output.writeStructBegin('agora.thrift.eoSMAS.TLocationsList');
            if (this.locations !== null && this.locations !== undefined) {
                output.writeFieldBegin('locations', Thrift.Type.LIST, 1);
                output.writeListBegin(Thrift.Type.STRING, this.locations.length);
                for (var iter15 in this.locations)
                {
                    if (this.locations.hasOwnProperty(iter15))
                    {
                        iter15 = this.locations[iter15];
                        output.writeString(iter15);
                    }
                }
                output.writeListEnd();
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        };

        agora.thrift.eoSMAS.TPlaceholder = function(args) {
            this.key = null;
            this.description = null;
            if (args) {
                if (args.key !== undefined) {
                    this.key = args.key;
                }
                if (args.description !== undefined) {
                    this.description = args.description;
                }
            }
        };
        agora.thrift.eoSMAS.TPlaceholder.prototype = {};
        agora.thrift.eoSMAS.TPlaceholder.prototype.read = function(input) {
            input.readStructBegin();
            while (true)
            {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                    break;
                }
                switch (fid)
                {
                    case 1:
                        if (ftype == Thrift.Type.STRING) {
                            this.key = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 2:
                        if (ftype == Thrift.Type.STRING) {
                            this.description = input.readString().value;
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    default:
                        input.skip(ftype);
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        };

        agora.thrift.eoSMAS.TPlaceholder.prototype.write = function(output) {
            output.writeStructBegin('agora.thrift.eoSMAS.TPlaceholder');
            if (this.key !== null && this.key !== undefined) {
                output.writeFieldBegin('key', Thrift.Type.STRING, 1);
                output.writeString(this.key);
                output.writeFieldEnd();
            }
            if (this.description !== null && this.description !== undefined) {
                output.writeFieldBegin('description', Thrift.Type.STRING, 2);
                output.writeString(this.description);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        };

        agora.thrift.eoSMAS.TPlaceholdersList = function(args) {
            this.placeholders = null;
            if (args) {
                if (args.placeholders !== undefined) {
                    this.placeholders = args.placeholders;
                }
            }
        };
        agora.thrift.eoSMAS.TPlaceholdersList.prototype = {};
        agora.thrift.eoSMAS.TPlaceholdersList.prototype.read = function(input) {
            input.readStructBegin();
            while (true)
            {
                var ret = input.readFieldBegin();
                var fname = ret.fname;
                var ftype = ret.ftype;
                var fid = ret.fid;
                if (ftype == Thrift.Type.STOP) {
                    break;
                }
                switch (fid)
                {
                    case 1:
                        if (ftype == Thrift.Type.LIST) {
                            var _size16 = 0;
                            var _rtmp320;
                            this.placeholders = [];
                            var _etype19 = 0;
                            _rtmp320 = input.readListBegin();
                            _etype19 = _rtmp320.etype;
                            _size16 = _rtmp320.size;
                            for (var _i21 = 0; _i21 < _size16; ++_i21)
                            {
                                var elem22 = null;
                                elem22 = new agora.thrift.eoSMAS.TPlaceholder();
                                elem22.read(input);
                                this.placeholders.push(elem22);
                            }
                            input.readListEnd();
                        } else {
                            input.skip(ftype);
                        }
                        break;
                    case 0:
                        input.skip(ftype);
                        break;
                    default:
                        input.skip(ftype);
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return;
        };

        agora.thrift.eoSMAS.TPlaceholdersList.prototype.write = function(output) {
            output.writeStructBegin('agora.thrift.eoSMAS.TPlaceholdersList');
            if (this.placeholders !== null && this.placeholders !== undefined) {
                output.writeFieldBegin('placeholders', Thrift.Type.LIST, 1);
                output.writeListBegin(Thrift.Type.STRUCT, this.placeholders.length);
                for (var iter23 in this.placeholders)
                {
                    if (this.placeholders.hasOwnProperty(iter23))
                    {
                        iter23 = this.placeholders[iter23];
                        iter23.write(output);
                    }
                }
                output.writeListEnd();
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        };

        return agora.thrift.eoSMAS;
    }]);
}());