(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require(undefined));
	else if(typeof define === 'function' && define.amd)
		define(["angular"], factory);
	else if(typeof exports === 'object')
		exports["upWebApi"] = factory(require("angular"));
	else
		root["upWebApi"] = factory(root["angular"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 77);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _assign = __webpack_require__(22);

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Base class for service providers
 */
var ServiceProvider = function () {
  /**
   * Create instance
   * @param {function} serviceFactory a function that returns an instance of the service
   */
  function ServiceProvider(serviceFactory) {
    _classCallCheck(this, ServiceProvider);

    this._config = {}; // define default configuration
    this._serviceFactory = serviceFactory;
  }

  /**
   * Provides ability to provide configuration information for a service during configuration time but prior to providing
   * the service.
   * @param {object} configuration
   * @return {ServiceProvider}
   */


  _createClass(ServiceProvider, [{
    key: 'configure',
    value: function configure(configuration) {
      this._config = (0, _assign2.default)(this._config, configuration);
      return this;
    }

    /**
     * Build the service instance with the providers configuration
     * @return {Service}
     */

  }, {
    key: 'provide',
    value: function provide() {
      for (var _len = arguments.length, dependencies = Array(_len), _key = 0; _key < _len; _key++) {
        dependencies[_key] = arguments[_key];
      }

      return this._serviceFactory.apply(this, [this._config].concat(dependencies));
    }
  }]);

  return ServiceProvider;
}();

exports.default = ServiceProvider;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _api = __webpack_require__(39);

var _angular = __webpack_require__(1);

var _angular2 = _interopRequireDefault(_angular);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _angular2.default.module('up.webApi.core', []).constant('UP_WEBAPI_VERSION', _api.VERSION).name;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = __webpack_require__(1);

var _angular2 = _interopRequireDefault(_angular);

var _angularApiCore = __webpack_require__(2);

var _angularApiCore2 = _interopRequireDefault(_angularApiCore);

var _webApiAuthProvider = __webpack_require__(34);

var _webApiAuthProvider2 = _interopRequireDefault(_webApiAuthProvider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _angular2.default.module('up.webApi.auth', [_angularApiCore2.default]).constant('UP_WEB_API_AUTH_PROVIDER_CLASS', _webApiAuthProvider2.default).provider('upWebApiAuth', ['UP_WEB_API_AUTH_PROVIDER_CLASS', function (Provider) {
  var provider = new Provider();
  this.configure = function (config) {
    provider.configure(config);
  };
  this.$get = function () {
    return provider.provide();
  };
}]).name; /* eslint-disable no-invalid-this */

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = __webpack_require__(1);

var _angular2 = _interopRequireDefault(_angular);

var _angularApiCore = __webpack_require__(2);

var _angularApiCore2 = _interopRequireDefault(_angularApiCore);

var _webApiConfigurationProvider = __webpack_require__(35);

var _webApiConfigurationProvider2 = _interopRequireDefault(_webApiConfigurationProvider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _angular2.default.module('up.webApi.configuration', [_angularApiCore2.default]).constant('UP_WEB_API_CONFIGURATION_PROVIDER_CLASS', _webApiConfigurationProvider2.default).provider('upWebApiConfiguration', ['UP_WEB_API_CONFIGURATION_PROVIDER_CLASS', function (Provider) {
  var provider = new Provider();
  this.configure = function (config) {
    provider.configure(config);
  };
  this.$get = function () {
    return provider.provide();
  };
}]).name; /* eslint-disable no-invalid-this */

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _webApiService = __webpack_require__(21);

var _webApiService2 = _interopRequireDefault(_webApiService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Client Service
 */
var WebApiGatewayService = function (_WebApiService) {
  _inherits(WebApiGatewayService, _WebApiService);

  function WebApiGatewayService() {
    _classCallCheck(this, WebApiGatewayService);

    return _possibleConstructorReturn(this, (WebApiGatewayService.__proto__ || Object.getPrototypeOf(WebApiGatewayService)).apply(this, arguments));
  }

  _createClass(WebApiGatewayService, [{
    key: 'getBasePath',


    /**
     * Return the base path for the dash binder Web APIs
     * @return {string}
     */
    value: function getBasePath() {
      return '/api/v3/' + this.getDomain();
    }

    /**
     * Should return the API Gateway "domain" for this API service
     * e.g. for the rooms service (i.e /api/v3/rooms) "rooms" is the domain
     */

  }, {
    key: 'getDomain',
    value: function getDomain() {
      throw new Error('Abstract method "getDomain" must be implemented');
    }
  }]);

  return WebApiGatewayService;
}(_webApiService2.default);

exports.default = WebApiGatewayService;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _frameworkBridge = __webpack_require__(74);

var _frameworkBridge2 = _interopRequireDefault(_frameworkBridge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Framework bridge for Angular 1.x.
 * Framework bridges are meant to provide the
 * wiring necessary to bridge the vanilla js library with a specific js framework
 */
var FrameworkBridgeAngular = function (_FrameworkBridge) {
  _inherits(FrameworkBridgeAngular, _FrameworkBridge);

  function FrameworkBridgeAngular() {
    _classCallCheck(this, FrameworkBridgeAngular);

    return _possibleConstructorReturn(this, (FrameworkBridgeAngular.__proto__ || Object.getPrototypeOf(FrameworkBridgeAngular)).apply(this, arguments));
  }

  _createClass(FrameworkBridgeAngular, [{
    key: 'createServiceDecorator',

    /**
     * Decorates the vanilla js service such that native Promises are converted
     * to angulars $q api.
     * @param {string} serviceName the name of the angular service being decorated
     * @param {Service} serviceClass the class object of the service being decorated
     * @return {Array}
     */
    value: function createServiceDecorator(serviceName, serviceClass) {
      return ['$delegate', '$q', function ($delegate, $q) {
        Object.getOwnPropertyNames(serviceClass.prototype).forEach(function (property) {
          if (property !== 'constructor' && typeof serviceClass.prototype[property] === 'function') {
            var originalMethod = $delegate[property];
            $delegate[property] = function () {
              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              var result = originalMethod.call.apply(originalMethod, [$delegate].concat(args));
              if (result instanceof Promise || result && typeof result.then === 'function') {
                return $q.resolve(result);
              } else {
                return result;
              }
            };
          }
        });
        return $delegate;
      }];
    }

    /**
     * See createServiceDecorator
     * @param {string} serviceName the name of the angular service being decorated
     * @param {Service} serviceClass the class object of the service being decorated
     * @param {string} successorServiceName a non null value indicates the current service has been deprecated and provides the name of the angular service that should be used instead of the current service
     * @return {Array}
     */

  }, {
    key: 'createServiceDecoratorConfigBlock',
    value: function createServiceDecoratorConfigBlock(serviceName, serviceClass, successorServiceName) {
      var _this2 = this;

      return ['$provide', function ($provide) {
        $provide.decorator(serviceName, _this2.createServiceDecorator(serviceName, serviceClass, successorServiceName));
      }];
    }

    /**
     * Builds a service provider factory (see angular's provider pattern)
     * @param {string} providerDiName the angular di name of the provider class
     * @param {...Object} angularServiceDiNames the angular service names this service depends on
     * @return {Array}
     */

  }, {
    key: 'createProviderFactory',
    value: function createProviderFactory(providerDiName) {
      for (var _len2 = arguments.length, angularServiceDiNames = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        angularServiceDiNames[_key2 - 1] = arguments[_key2];
      }

      return [providerDiName, function (Provider) {
        var provider = new Provider();
        this.configure = function (config) {
          // eslint-disable-line no-invalid-this
          provider.configure(config);
        };
        this.$get = [].concat(angularServiceDiNames, [function () {
          // eslint-disable-line no-invalid-this
          return provider.provide.apply(provider, arguments);
        }]);
      }];
    }

    /**
     * Builds a service provider factory (see angular's provider pattern)
     * @param {string} deprecatedServcieName the angular di name of the deprecated service
     * @param {string} successorServiceName the angular di name of the service which should be used instead
     * @param {string} providerDiName the angular di name of the provider class
     * @param {...Object} angularServiceDiNames the angular service names this service depends on
     * @return {Array}
     */

  }, {
    key: 'createDeprecatedServiceProviderFactory',
    value: function createDeprecatedServiceProviderFactory(deprecatedServcieName, successorServiceName, providerDiName) {
      for (var _len3 = arguments.length, angularServiceDiNames = Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
        angularServiceDiNames[_key3 - 3] = arguments[_key3];
      }

      return [providerDiName, function (Provider) {
        var provider = new Provider();
        this.configure = function (config) {
          // eslint-disable-line no-invalid-this
          provider.configure(config);
        };
        this.$get = [].concat(angularServiceDiNames, [function () {
          // eslint-disable-line no-invalid-this
          console.warn(deprecatedServcieName + ' has been deprecated. Please use ' + successorServiceName + ' instead.');
          return provider.provide.apply(provider, arguments);
        }]);
      }];
    }
  }]);

  return FrameworkBridgeAngular;
}(_frameworkBridge2.default);

exports.default = FrameworkBridgeAngular;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Base Service class
 */
var Service = function () {
  /**
   * Create instance
   * @param {Object} configuration
   */
  function Service(configuration) {
    _classCallCheck(this, Service);

    this._config = configuration || {};
  }

  /**
   * Reconfigure the service during run time if needed
   * @param {Object} configuration
   */


  _createClass(Service, [{
    key: "configure",
    value: function configure(configuration) {
      this._config = configuration || {};
    }
  }]);

  return Service;
}();

exports.default = Service;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(9)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 10 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _webApiDashBinderService = __webpack_require__(20);

var _webApiDashBinderService2 = _interopRequireDefault(_webApiDashBinderService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Client Service
 */
var IdMapService = function (_WebApiDashBinderServ) {
  _inherits(IdMapService, _WebApiDashBinderServ);

  /**
   * @param {Object} configuration
   * @param {WebApiConfigurationService} webApiConfiguration shared configuration for library
   * @param {WebApiAuthService} webApiAuth service used to retrieve a valid OAuthToken when status 401 is received from the server
   */
  function IdMapService(configuration, webApiConfiguration, webApiAuth) {
    _classCallCheck(this, IdMapService);

    return _possibleConstructorReturn(this, (IdMapService.__proto__ || Object.getPrototypeOf(IdMapService)).call(this, configuration, webApiConfiguration, webApiAuth));
  }

  /**
   * Get User's referral ID
   * @param {object} params
   * @return {Promise.<*>}
   */


  _createClass(IdMapService, [{
    key: 'getReferralId',
    value: function getReferralId() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var options = {
        query: params,
        path: '/idmaps/referralId',
        method: 'GET'
      };

      return this._fetchJSON(options);
    }
  }]);

  return IdMapService;
}(_webApiDashBinderService2.default);

exports.default = IdMapService;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _webApiGatewayService = __webpack_require__(5);

var _webApiGatewayService2 = _interopRequireDefault(_webApiGatewayService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Notification Feed Client Service
 * In order to use this service an OAuth2 Client must be assigned these scopes (WEBAPI-2688)
 * - notification-feed:read:healthcheck
 * - notification-feed:read:notifications
 * - notification-feed:write:notifications
 * @see oauth2internalAS in Swagger via Taxis. Be sure to first fetch the existing client because you will be required to add all the existing scopes to the PUT request
 * @see WEBAPI-2688
 */
var NotificationService = function (_WebApiGatewayService) {
  _inherits(NotificationService, _WebApiGatewayService);

  /**
   * @param {Object} configuration
   * @param {WebApiConfigurationService} webApiConfiguration shared configuration for library
   * @param {WebApiAuthService} webApiAuth service used to retrieve a valid OAuthToken when status 401 is received from the server
   */
  function NotificationService(configuration, webApiConfiguration, webApiAuth) {
    _classCallCheck(this, NotificationService);

    return _possibleConstructorReturn(this, (NotificationService.__proto__ || Object.getPrototypeOf(NotificationService)).call(this, configuration, webApiConfiguration, webApiAuth));
  }
  /**
   * @param {Array<string>} recipients An array of email addresses to share with
   * @param {string} template the name of the email template to render
   * @param {Object} templateParams the email template parameters
   * @return {Promise.<*>}
   */


  _createClass(NotificationService, [{
    key: 'sendEmail',
    value: function sendEmail(recipients, template, templateParams) {
      var query = this._buildQueryWithOrg();
      var options = {
        query: query,
        body: JSON.stringify({
          recipients: recipients,
          template: template,
          templateParams: templateParams
        }),
        path: '/notifications/email',
        method: 'POST'
      };
      return this._fetchJSON(options);
    }

    /**
     * Check the health of the service
     * @return {Object}
     */

  }, {
    key: 'healthcheck',
    value: function healthcheck() {
      var query = this._buildQueryWithOrg();
      var options = {
        query: query,
        path: '/notifications/healthcheck',
        method: 'GET'
      };
      return this._fetchJSON(options);
    }

    /**
     * Provides the API Gateway domain for this service.
     * (/api/v3/<domain> is the base uri for API Gateway calls)
     * @see WEBAPI-2688 which defines the domain (in linked PR)
     * @return {string}
     */

  }, {
    key: 'getDomain',
    value: function getDomain() {
      return 'notification-feed';
    }
  }]);

  return NotificationService;
}(_webApiGatewayService2.default);

exports.default = NotificationService;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _webApiGatewayService = __webpack_require__(5);

var _webApiGatewayService2 = _interopRequireDefault(_webApiGatewayService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Client Service
 */
var RoomService = function (_WebApiGatewayService) {
  _inherits(RoomService, _WebApiGatewayService);

  /**
   * @param {Object} configuration
   * @param {WebApiConfigurationService} webApiConfiguration shared configuration for library
   * @param {WebApiAuthService} webApiAuth service used to retrieve a valid OAuthToken when status 401 is received from the server
   */
  function RoomService(configuration, webApiConfiguration, webApiAuth) {
    _classCallCheck(this, RoomService);

    // consumers of the API generally fetch global settings by default
    var _this = _possibleConstructorReturn(this, (RoomService.__proto__ || Object.getPrototypeOf(RoomService)).call(this, configuration, webApiConfiguration, webApiAuth));

    _this._enableGlobalSettings = true;
    return _this;
  }

  /**
   * Get Stories
   * @param {object} params
   * @return {Promise.<*>}
   */


  _createClass(RoomService, [{
    key: 'getStories',
    value: function getStories() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var query = this._buildQueryWithOrg(params, ['roomId']);
      var options = {
        path: '/rooms/' + params.roomId + '/stories',
        method: 'GET',
        query: query
      };

      return this._fetchJSON(options);
    }

    /**
     * Get Rooms
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'getRooms',
    value: function getRooms() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var options = {
        path: '/rooms',
        method: 'GET',
        query: this._buildQueryWithOrg(params)
      };

      return this._fetchJSON(options);
    }

    /**
     * Get Room
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'getRoom',
    value: function getRoom() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var query = this._buildQueryWithOrg(params, ['roomId']);
      if (query.storyLimit) {
        query.limit = query.storyLimit;
        delete query.storyLimit;
      }

      var options = {
        path: '/rooms/' + params.roomId,
        method: 'GET',
        query: query
      };

      return this._fetchJSON(options);
    }

    /**
     * Create new Room
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'newRoom',
    value: function newRoom() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var body = JSON.stringify(params.roomRequest);
      var query = this._buildQueryWithOrg(params, ['roomRequest']);
      var options = {
        query: query,
        path: '/rooms',
        method: 'POST',
        body: body
      };
      return this._fetchJSON(options);
    }

    /**
     * Update Room
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'updateRoom',
    value: function updateRoom() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var query = this._buildQueryWithOrg(params, ['roomId']);
      var options = {
        query: query,
        path: '/rooms/' + params.roomId,
        method: 'PUT',
        body: JSON.stringify(params.roomMetadata)
      };

      return this._fetchJSON(options);
    }

    /**
     * Add new story to room
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'newStory',
    value: function newStory() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var query = this._buildQueryWithOrg(params, ['roomId', 'newStory']);
      var body = JSON.stringify(params.newStory);
      var options = {
        query: query,
        path: '/rooms/' + params.roomId + '/stories',
        method: 'POST',
        body: body
      };

      return this._fetchJSON(options);
    }

    /**
     * update story
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'updateStory',
    value: function updateStory() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var body = JSON.stringify(params.storyUpdateRequest);
      var query = this._buildQueryWithOrg(params, ['roomId', 'storyId', 'storyUpdateRequest']);
      var options = {
        query: query,
        path: '/rooms/' + params.roomId + '/stories/' + params.storyId,
        method: 'PUT',
        body: body
      };

      return this._fetchJSON(options);
    }

    /**
     * remove story
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'deleteStory',
    value: function deleteStory() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var query = this._buildQueryWithOrg(params, ['roomId', 'storyId']);
      var options = {
        query: query,
        path: '/rooms/' + params.roomId + '/stories/' + params.storyId,
        method: 'DELETE'
      };

      return this._fetchJSON(options);
    }

    /**
     * get one on one room
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'getOneOnOneRoom',
    value: function getOneOnOneRoom() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var query = this._buildQueryWithOrg(params, ['userId', 'orgId']);
      var options = {
        path: '/rooms/1on1room/' + params.userId + '/' + params.orgId,
        method: 'GET',
        query: query
      };

      return this._fetchJSON(options);
    }

    /**
     * get object references for room
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'getObjectReferences',
    value: function getObjectReferences() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var query = this._buildQueryWithOrg(params, ['roomId']);
      var options = {
        path: '/rooms/' + params.roomId + '/objectReferences',
        method: 'GET',
        query: query
      };

      return this._fetchJSON(options);
    }

    /**
     * Subscribe user to room
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'subscribeUserToRoom',
    value: function subscribeUserToRoom() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var body = JSON.stringify(params.subscribeUserRequest);
      var query = this._buildQueryWithOrg(params, ['roomId', 'userId', 'orgId', 'subscribeUserRequest']);
      var options = {
        path: '/rooms/' + params.roomId + '/users/' + params.userId + '/' + params.orgId,
        method: 'POST',
        body: body,
        query: query
      };

      return this._fetchJSON(options);
    }

    /**
     * remove user from room
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'removeUser',
    value: function removeUser() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var query = this._buildQueryWithOrg(params, ['roomId', 'userId', 'orgId']);
      var options = {
        path: '/rooms/' + params.roomId + '/users/' + params.userId + '/' + params.orgId,
        method: 'DELETE',
        query: query
      };

      return this._fetchJSON(options);
    }

    /**
     * get broadcasts for user
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'getBroadcastsForUser',
    value: function getBroadcastsForUser() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var options = {
        path: '/users/broadcasts',
        method: 'GET',
        query: this._buildQueryWithOrg(params)
      };

      return this._fetchJSON(options);
    }

    /**
     * get message counts for user
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'getMessageCounts',
    value: function getMessageCounts() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var options = {
        path: '/users/messageCounts',
        method: 'GET',
        query: this._buildQueryWithOrg(params)
      };

      return this._fetchJSON(options);
    }

    /**
     * get last read
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'getLastRead',
    value: function getLastRead() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var query = this._buildQueryWithOrg(params, ['roomId', 'userId', 'orgId']);
      var options = {
        path: '/rooms/' + params.roomId + '/users/' + params.userId + '/' + params.orgId,
        method: 'GET',
        query: query
      };

      return this._fetchJSON(options);
    }

    /**
     * check limit for post in room per day
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'hasExceededLimitOfRoomsToPostInPerDay',
    value: function hasExceededLimitOfRoomsToPostInPerDay() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var options = {
        path: '/users/limits/hasExceededNumberOfRoomsToPostIn',
        method: 'GET',
        query: this._buildQueryWithOrg(params)
      };

      return this._fetchJSON(options);
    }

    /**
     * ping rooms api
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'reorderFavorites',
    value: function reorderFavorites() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var body = JSON.stringify(params.roomList);
      var query = this._buildQueryWithOrg(params, ['roomList']);
      var options = {
        path: '/rooms',
        method: 'PUT',
        body: body,
        query: query
      };

      return this._fetchJSON(options);
    }

    /**
     * health check for rooms api (returns server timestamp, see WP-15422)
     * @todo verify after resolution of WEBAPI-2681 (done), WP-15402 (done), AUTH-2154
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'healthcheck',
    value: function healthcheck() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var options = {
        path: '/healthcheck',
        method: 'GET',
        query: this._buildQueryWithOrg(params)
      };

      return this._fetchJSON(options);
    }

    /**
     * Endpoint which asks TokBox to start recording the on-going video session for
     * the room with specified roomId.
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'startCallRecordings',
    value: function startCallRecordings() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var query = this._buildQueryWithOrg(params, ['roomId']);
      var options = {
        path: '/videoSessions/ongoing/rooms/' + params.roomId + '/recordings/start',
        method: 'POST',
        query: query
      };

      return this._fetchJSON(options);
    }

    /**
     * Endpoint which asks TokBox to stop recording the on-going video session for
     * the room with specified roomId.
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'stopCallRecordings',
    value: function stopCallRecordings() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var query = this._buildQueryWithOrg(params, ['roomId']);
      var options = {
        path: '/videoSessions/ongoing/rooms/' + params.roomId + '/recordings/stop',
        method: 'POST',
        query: query
      };

      return this._fetchJSON(options);
    }

    /**
     * get the number of users connected in the video session for the room
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'getNumberUsersInVideoSession',
    value: function getNumberUsersInVideoSession() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var query = this._buildQueryWithOrg(params, ['roomId']);
      var options = {
        path: '/videoSessions/ongoing/rooms/' + params.roomId + '/userCount',
        method: 'GET',
        query: query
      };

      return this._fetchJSON(options);
    }

    /**
     * End-point for fetching the roomId and video session id associated with that
     * recording identified by specified archiveId.
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'getVideoDataByArchiveId',
    value: function getVideoDataByArchiveId() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var query = this._buildQueryWithOrg(params, ['archiveId']);
      var options = {
        path: '/videoSessions/recordings/' + params.archiveId,
        method: 'GET',
        query: query
      };

      return this._fetchJSON(options);
    }

    /**
     * get the video sessionId and token associated with the room
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'getVideoSessionId',
    value: function getVideoSessionId() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var query = this._buildQueryWithOrg(params, ['roomId']);
      var options = {
        path: '/videoSessions/rooms/' + params.roomId,
        method: 'GET',
        query: query
      };

      return this._fetchJSON(options);
    }

    /**
     * ping rooms api
     * @deprecated api gateway has no mapping for the _ping endpoint of agora services by design
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'ping',
    value: function ping() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return this.healthcheck(params);
    }

    /**
     * Provides the API Gateway domain for this service.
     * (/api/v3/<domain> is the base uri for API Gateway calls)
     * @return {string}
     */

  }, {
    key: 'getDomain',
    value: function getDomain() {
      return 'rooms';
    }

    /**
     * Update ObjectReference
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'updateObjectReference',
    value: function updateObjectReference() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var query = this._buildQueryWithOrg(params, ['objectReferenceId']);
      var options = {
        query: query,
        path: '/objectReferences/id/' + params.objectReferenceId,
        method: 'PUT',
        body: JSON.stringify(params.referenceUpdateRequest)
      };

      return this._fetchJSON(options);
    }
  }]);

  return RoomService;
}(_webApiGatewayService2.default);

exports.default = RoomService;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _webApiGatewayService = __webpack_require__(5);

var _webApiGatewayService2 = _interopRequireDefault(_webApiGatewayService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Client Search Service
 *
 * In order to use this service an OAuth2 Client must be assigned these scopes (WEBAPI-2687)
 * - search:read:public
 * - search:read:healthcheck
 * @see oauth2internalAS in Swagger via Taxis. Be sure to first fetch the existing client because you will be required to add all the existing scopes to the PUT request
 * @see WEBAPI-2687
 * @todo verify after resolution of blocking ticket MATCH-5025
 */
var SearchService = function (_WebApiGatewayService) {
  _inherits(SearchService, _WebApiGatewayService);

  /**
   * @param {Object} configuration
   * @param {WebApiConfigurationService} webApiConfiguration shared configuration for library
   * @param {WebApiAuthService} webApiAuth service used to retrieve a valid OAuthToken when status 401 is received from the server
   */
  function SearchService(configuration, webApiConfiguration, webApiAuth) {
    _classCallCheck(this, SearchService);

    // consumers of the API generally fetch global settings by default
    var _this = _possibleConstructorReturn(this, (SearchService.__proto__ || Object.getPrototypeOf(SearchService)).call(this, configuration, webApiConfiguration, webApiAuth));

    _this._enableGlobalSettings = true;
    return _this;
  }

  /**
   * Get Search
   * @param {object} params
   * @return {Promise.<*>}
   */


  _createClass(SearchService, [{
    key: 'search',
    value: function search() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var options = {
        path: '/public/search',
        method: 'GET',
        query: this._buildQueryWithOrg(params)
      };

      return this._fetchJSON(options);
    }

    /**
     * Get Spotlight
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'spotlight',
    value: function spotlight() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var options = {
        path: '/public/spotlight',
        method: 'GET',
        query: this._buildQueryWithOrg(params)
      };

      return this._fetchJSON(options);
    }

    /**
     * Get spotlight4
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'spotlight4',
    value: function spotlight4() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var options = {
        path: '/public/spotlight4',
        method: 'GET',
        query: this._buildQueryWithOrg(params)
      };

      return this._fetchJSON(options);
    }

    /**
     * Get Browse
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'browseRoomAndUser',
    value: function browseRoomAndUser() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var options = {
        path: '/public/browse',
        method: 'GET',
        query: this._buildQueryWithOrg(params)
      };

      return this._fetchJSON(options);
    }

    /**
     * Search Healthcheck
     * @see MATCH-5033
     * @todo verify after resolution of blocking ticket MATCH-5033
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'healthcheck',
    value: function healthcheck() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var options = {
        path: '/healthcheck',
        method: 'GET',
        query: this._buildQueryWithOrg(params)
      };

      return this._fetchJSON(options);
    }

    /**
     * Search Ping
     * @deprecated use #healthcheck
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'ping',
    value: function ping(params) {
      return this.healthcheck(params);
    }

    /**
     * Provides the API Gateway domain for this service.
     * (/api/v3/<domain> is the base uri for API Gateway calls)
     * @see WEBAPI-2687 which defines the domain (in linked PR)
     * @return {string}
     */

  }, {
    key: 'getDomain',
    value: function getDomain() {
      return 'search';
    }
  }]);

  return SearchService;
}(_webApiGatewayService2.default);

exports.default = SearchService;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _webApiDashBinderService = __webpack_require__(20);

var _webApiDashBinderService2 = _interopRequireDefault(_webApiDashBinderService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Client Service
 */
var UserPreferencesService = function (_WebApiDashBinderServ) {
  _inherits(UserPreferencesService, _WebApiDashBinderServ);

  /**
   * @param {Object} configuration
   * @param {WebApiConfigurationService} webApiConfiguration shared configuration for library
   * @param {WebApiAuthService} webApiAuth service used to retrieve a valid OAuthToken when status 401 is received from the server
   */
  function UserPreferencesService(configuration, webApiConfiguration, webApiAuth) {
    _classCallCheck(this, UserPreferencesService);

    // consumers of the API generally fetch global settings by default
    var _this = _possibleConstructorReturn(this, (UserPreferencesService.__proto__ || Object.getPrototypeOf(UserPreferencesService)).call(this, configuration, webApiConfiguration, webApiAuth));

    _this._enableGlobalSettings = true;
    return _this;
  }
  /**
   * Get User Settings
   * @return {Promise.<*>}
   */


  _createClass(UserPreferencesService, [{
    key: 'getUserPreferences',
    value: function getUserPreferences() {
      var query = {
        orgId: this.getOrgId(),
        global: this._enableGlobalSettings ? 1 : 0
      };
      var options = {
        query: query,
        path: '/user-preferences',
        method: 'GET'
      };
      return this._fetchJSON(options);
    }

    /**
     * Save (Add/Update) user preferences for multiple components
     * @param {[{componentName: string, preferences: [{prefName: string, prefValue: string}]}]} componentsPreferences
     * @return {Promise.<*>}
     */

  }, {
    key: 'saveUserPreferences',
    value: function saveUserPreferences(componentsPreferences) {
      var query = {
        orgId: this.getOrgId(),
        global: this._enableGlobalSettings ? 1 : 0
      };
      var options = {
        query: query,
        path: '/user-preferences',
        method: 'PUT',
        body: JSON.stringify({ 'componentList': componentsPreferences })
      };
      return this._fetchJSON(options);
    }

    /**
     * Save (Add/Update) user preferences for a single component
     *
     * @param {string} component
     * @param {[{prefName: string, prefValue: string}]} preferences
     * @return {Promise.<*>}
     */

  }, {
    key: 'saveComponentPreferences',
    value: function saveComponentPreferences(component, preferences) {
      var query = {
        orgId: this.getOrgId(),
        global: this._enableGlobalSettings ? 1 : 0
      };

      var options = {
        query: query,
        path: '/user-preferences/' + component,
        method: 'PUT',
        body: JSON.stringify(preferences)
      };

      return this._fetchJSON(options);
    }

    /**
     * Save (Add/Update) user preferences for a single component
     * @param {string} component
     * @return {Promise.<*>}
     */

  }, {
    key: 'getComponentPreferences',
    value: function getComponentPreferences(component) {
      var query = {
        orgId: this.getOrgId(),
        global: this._enableGlobalSettings ? 1 : 0
      };
      var options = {
        query: query,
        path: '/user-preferences/' + component,
        method: 'GET'
      };
      return this._fetchJSON(options);
    }

    /**
     * When global settings are disabled then org specific settings will be fetched
     *
     * @param {bool} shouldEnableGlobalSettings when true reads and writes of settings will effect global settings, when false org specific settings are effected
     * @return {UserPreferencesService}
     */

  }, {
    key: 'enableGlobalSettings',
    value: function enableGlobalSettings() {
      var shouldEnableGlobalSettings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      this._enableGlobalSettings = !!shouldEnableGlobalSettings;
      return this;
    }
  }]);

  return UserPreferencesService;
}(_webApiDashBinderService2.default);

exports.default = UserPreferencesService;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _webApiGatewayService = __webpack_require__(5);

var _webApiGatewayService2 = _interopRequireDefault(_webApiGatewayService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Client Service
 */
var UserQtService = function (_WebApiGatewayService) {
  _inherits(UserQtService, _WebApiGatewayService);

  /**
   * @param {Object} configuration
   * @param {WebApiConfigurationService} webApiConfiguration shared configuration for library
   * @param {WebApiAuthService} webApiAuth service used to retrieve a valid OAuthToken when status 401 is received from the server
   */
  function UserQtService(configuration, webApiConfiguration, webApiAuth) {
    _classCallCheck(this, UserQtService);

    return _possibleConstructorReturn(this, (UserQtService.__proto__ || Object.getPrototypeOf(UserQtService)).call(this, configuration, webApiConfiguration, webApiAuth));
  }

  /**
   * Gets Organization Allocation
   * @param {object} params
   * @return {Promise.<*>}
   */


  _createClass(UserQtService, [{
    key: 'getOrganizationAllocation',
    value: function getOrganizationAllocation() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var query = this._buildQueryWithOrg(params, ['testName']);
      var options = {
        path: '/allocations/organization/' + this.getOrgId() + '/test/' + params.testName,
        method: 'GET',
        query: query
      };
      return this._fetchJSON(options);
    }

    /**
     * Gets Person Allocation
     * @param {object} params
     * @return {Promise.<*>}
     */

  }, {
    key: 'getPersonAllocation',
    value: function getPersonAllocation() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var query = this._buildQueryWithOrg(params, ['testName']);
      var options = {
        path: '/allocations/person/test/' + params.testName,
        method: 'GET',
        query: query
      };
      return this._fetchJSON(options);
    }

    /**
     * Provides the API Gateway domain for this service.
     * (/api/v3/<domain> is the base uri for API Gateway calls)
     * @return {string}
     */

  }, {
    key: 'getDomain',
    value: function getDomain() {
      return 'qt';
    }
  }]);

  return UserQtService;
}(_webApiGatewayService2.default);

exports.default = UserQtService;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _service = __webpack_require__(7);

var _service2 = _interopRequireDefault(_service);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Client Service
 */
var WebApiAuthService = function (_Service) {
  _inherits(WebApiAuthService, _Service);

  /**
   * @constructor
   * @param {object} configuration service configuration
   */
  function WebApiAuthService(configuration) {
    _classCallCheck(this, WebApiAuthService);

    return _possibleConstructorReturn(this, (WebApiAuthService.__proto__ || Object.getPrototypeOf(WebApiAuthService)).call(this, configuration));
  }

  /**
   * Consuming applications should overwrite (delegator pattern) this method such that
   * it will return a Promise that resolves with a valid OAuth token. By default this
   * method returns a rejected Promise.
   * @return {Promise}
   */


  _createClass(WebApiAuthService, [{
    key: 'refreshOAuthToken',
    value: function refreshOAuthToken() {
      return Promise.reject('\n      Unable to refresh auth token\n      (WebApiAuthService#refreshAuthToken is meant to be implemented\n      by the consuming application)\n      ');
    }
  }]);

  return WebApiAuthService;
}(_service2.default);

exports.default = WebApiAuthService;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _service = __webpack_require__(7);

var _service2 = _interopRequireDefault(_service);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Client Service
 */
var WebApiConfigurationService = function (_Service) {
  _inherits(WebApiConfigurationService, _Service);

  /**
   * @constructor
   * @param {object} configuration service configuration
   */
  function WebApiConfigurationService(configuration) {
    _classCallCheck(this, WebApiConfigurationService);

    var _this = _possibleConstructorReturn(this, (WebApiConfigurationService.__proto__ || Object.getPrototypeOf(WebApiConfigurationService)).call(this, configuration));

    _this._hostUri = _this._config.hostUri;
    _this._orgId = _this._config.orgId;
    _this._userId = _this._config.userId;
    _this._oAuthToken = _this._config.oAuthToken;
    _this._maxOAuthTokenRefreshAttempts = _this._config.maxOAuthTokenRefreshAttempts || 1;
    return _this;
  }

  /**
   * Set the base uri of the api endpoint of the web api service
   * @param {string} hostUri the host which the API lives on
   * @return {WebApiConfigurationService}
   */


  _createClass(WebApiConfigurationService, [{
    key: 'setHostUri',
    value: function setHostUri(hostUri) {
      this._hostUri = hostUri;
      return this;
    }

    /**
     * Fetch the base uri
     * @return {string}
     */

  }, {
    key: 'getHostUri',
    value: function getHostUri() {
      if (!this._hostUri) {
        // default to <current host>/messages/api (which will be true for almost all upwork clients)
        if (location) {
          this._hostUri = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '');
        }
      }
      return this._hostUri;
    }

    /**
     * Set the Upwork organization id which is required to make requests on the user preferences service
     * @param {string} orgId
     * @return {WebApiConfigurationService}
     */

  }, {
    key: 'setOrgId',
    value: function setOrgId(orgId) {
      this._orgId = orgId;
      return this;
    }

    /**
     * Fetch the organization id contextf
     * @return {string}
     */

  }, {
    key: 'getOrgId',
    value: function getOrgId() {
      return this._orgId;
    }

    /**
     * Set the Upwork user id which is used as the default value for the user id if not provided by the consumer
     * @param {string} userId
     * @return {WebApiConfigurationService}
     */

  }, {
    key: 'setUserId',
    value: function setUserId(userId) {
      this._userId = userId;
      return this;
    }

    /**
     * Fetch the user id context
     * @return {string}
     */

  }, {
    key: 'getUserId',
    value: function getUserId() {
      return this._userId;
    }

    /**
     * Set the Upwork organization id which is required to make requests on the graphql service
     * @param {string} oAuthToken
     * @return {WebApiConfigurationService}
     */

  }, {
    key: 'setOAuthToken',
    value: function setOAuthToken(oAuthToken) {
      this._oAuthToken = oAuthToken;
      return this;
    }

    /**
     * Fetch the OAuth token
     * @return {string}
     */

  }, {
    key: 'getOAuthToken',
    value: function getOAuthToken() {
      return this._oAuthToken;
    }

    /**
     * Return the configured max number of attempts at fetching a fresh OAuth Token
     * @return {number}
     */

  }, {
    key: 'getMaxOAuthTokenRefreshAttempts',
    value: function getMaxOAuthTokenRefreshAttempts() {
      return this._maxOAuthTokenRefreshAttempts;
    }
  }]);

  return WebApiConfigurationService;
}(_service2.default);

exports.default = WebApiConfigurationService;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _webApiService = __webpack_require__(21);

var _webApiService2 = _interopRequireDefault(_webApiService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Client Service
 */
var WebApiDashBinderService = function (_WebApiService) {
  _inherits(WebApiDashBinderService, _WebApiService);

  function WebApiDashBinderService() {
    _classCallCheck(this, WebApiDashBinderService);

    return _possibleConstructorReturn(this, (WebApiDashBinderService.__proto__ || Object.getPrototypeOf(WebApiDashBinderService)).apply(this, arguments));
  }

  _createClass(WebApiDashBinderService, [{
    key: 'getBasePath',


    /**
     * Return the base path for the dash binder Web APIs
     * @return {string}
     */
    value: function getBasePath() {
      return '/messages/api';
    }

    /**
     * @param {...Object} args all arguments are passed to super class
     * @see WebApiService#_fetchJSON
     * @return {Object} json response from dash binder
     */

  }, {
    key: '_fetchJSON',
    value: function _fetchJSON() {
      var _get2;

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return (_get2 = _get(WebApiDashBinderService.prototype.__proto__ || Object.getPrototypeOf(WebApiDashBinderService.prototype), '_fetchJSON', this)).call.apply(_get2, [this].concat(args)).then(function (res) {
        return res.data;
      });
    }

    /**
     * Create a copy of a list of params and add orgId
     *
     * @private
     * @param {object} params
     * @param {[]} excludeParams a list of parameter names to be excluded
     * @param {string} callerOrgIdKey the name of the query parameter which represents the caller's org context
     * @return {object}
     */

  }, {
    key: '_buildQueryWithOrg',
    value: function _buildQueryWithOrg() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var excludeParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var callerOrgIdKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'orgId';

      return _get(WebApiDashBinderService.prototype.__proto__ || Object.getPrototypeOf(WebApiDashBinderService.prototype), '_buildQueryWithOrg', this).call(this, params, excludeParams, callerOrgIdKey);
    }
  }]);

  return WebApiDashBinderService;
}(_webApiService2.default);

exports.default = WebApiDashBinderService;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _service = __webpack_require__(7);

var _service2 = _interopRequireDefault(_service);

var _assign = __webpack_require__(22);

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Client Service
 */
var WebApiService = function (_Service) {
  _inherits(WebApiService, _Service);

  /**
   * @param {object} configuration application specific configuration
   * @param {WebApiConfiguration} webApiConfiguration shared api configuration service
   * @param {WebApiAuth} webApiAuth service used to request OAuthToken refresh when status 401 received from server
   */
  function WebApiService(configuration, webApiConfiguration, webApiAuth) {
    _classCallCheck(this, WebApiService);

    var _this = _possibleConstructorReturn(this, (WebApiService.__proto__ || Object.getPrototypeOf(WebApiService)).call(this, configuration));

    _this._webApiConfiguration = webApiConfiguration;
    _this._webApiAuth = webApiAuth;
    return _this;
  }

  /**
   * remove null, undefined and empty values from query object
   * @param {object} query object
   * @private
   * @return {object}
   */


  _createClass(WebApiService, [{
    key: '_filterQuery',
    value: function _filterQuery(query) {
      Object.keys(query).forEach(function (k) {
        if (query[k] === undefined || query[k] === null) {
          delete query[k];
        }
      });
      return query;
    }

    /**
     * Convert a hash into a query string
     *
     * @private
     * @param {object} queryHash a hash of query parameters meant to be encoded
     * @return {string} url encoded query string
     */

  }, {
    key: '_encodequery',
    value: function _encodequery() {
      var queryHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var esc = encodeURIComponent;
      return Object.keys(queryHash).map(function (k) {
        return esc(k) + '=' + esc(queryHash[k]);
      }).join('&');
    }

    /**
     * Build a request uri
     *
     * @private
     * @param {object} options
     * @param {object} options.query query parameters to be appended as a query string
     * @param {string} options.path the path of the URI endpoint
     * @return {string} the request uri
     */

  }, {
    key: '_buildUri',
    value: function _buildUri(options) {
      var query = this._filterQuery(options.query);
      var path = options.path;
      var encodedquery = this._encodequery(query);
      return this.getBaseUri() + (path || '') + (encodedquery ? '?' + this._encodequery(query) : '');
    }

    /**
     * Send and API request and promise the result
     *
     * @private
     * @param {object} options
     * @param {object} options.query query parameters to be appended as a query string
     * @param {string} options.path the path of the URI endpoint
     * @param {string} options.method the request method e.g. POST|GET|PUT
     * @param {integer} totalAttempts total number of recursive attempts
     * @return {Promise}
     */

  }, {
    key: '_fetch',
    value: function _fetch() {
      var _this2 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var totalAttempts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var uri = this._buildUri(options);
      var headers = options.headers || new Headers();
      if (!options.allowUnathorized && !this.getOAuthToken()) {
        return Promise.reject({
          status: 'ABORTED',
          message: 'An OAuth token is required, but has not been provided to the Web Api Client'
        });
      }
      if (this.getOAuthToken()) {
        headers.set('Authorization', 'bearer ' + this.getOAuthToken());
      }

      if (this.getOrgId()) {
        headers.set('vnd-eo-orguid', this.getOrgId());
      }

      var fetchOptions = {
        method: options.method || 'GET',
        headers: headers,
        mode: 'cors'
      };
      if (options.body) {
        fetchOptions.body = options.body;
      }
      return fetch(uri, fetchOptions).then(function (response) {
        if (!response.ok) {
          if (response.status === 401) {
            if (totalAttempts <= _this2._webApiConfiguration.getMaxOAuthTokenRefreshAttempts()) {
              // attempt to refresh Authorization
              return _this2._webApiAuth.refreshOAuthToken().then(function (oAuthToken) {
                _this2._webApiConfiguration.setOAuthToken(oAuthToken);
                return _this2._fetch(options, totalAttempts + 1);
              }, function () {
                return Promise.reject(response);
              });
            } else {
              return Promise.reject(response);
            }
          } else {
            return Promise.reject(response);
          }
        }
        return response;
      });
    }

    /**
     * Create a copy of a list of params and add orgId
     *
     * @private
     * @param {object} params
     * @param {[]} excludeParams a list of parameter names to be excluded
     * @param {string} callerOrgIdKey the name of the query parameter which represents the caller's org context
     * @return {object}
     */

  }, {
    key: '_buildQueryWithOrg',
    value: function _buildQueryWithOrg() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var excludeParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var callerOrgIdKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'callerOrgId';

      var query = {};
      // clone params to avoid changing consumer objects
      query = (0, _assign2.default)(query, params);
      // strip unwanted params from query object
      excludeParams.forEach(function (excludedParam) {
        delete query[excludedParam];
      });
      // set the caller org id on the clean query object
      query[callerOrgIdKey] = this.getOrgId();
      return query;
    }

    /**
     * Send and API request and return the json object
     *
     * @private
     * @param {object} options
     * @return {Promise}
     */

  }, {
    key: '_fetchJSON',
    value: function _fetchJSON(options) {
      options.headers = options.headers || new Headers();
      options.headers.append('Accept', 'application/json');
      options.headers.append('Content-Type', 'application/json');
      return this._fetch(options).then(function (response) {
        // this should not happen when requesting JSON, however
        // if the server misbehaves and sends a 204 (No Content) simply returned
        // an empty object;
        if (response.status === 204) {
          return {};
        }
        return response.json();
      });
    }

    /**
     * Set the base uri of the api endpoint of the web api service
     * @param {string} baseUri
     * @return {WebApiService}
     */

  }, {
    key: 'setBaseUri',
    value: function setBaseUri(baseUri) {
      this._config.baseUri = baseUri;
      return this;
    }

    /**
     * Get the base uri for dash binder (odesk-dash) web APIs
     * @return {string}
     */

  }, {
    key: 'getBaseUri',
    value: function getBaseUri() {
      return (this._config.hostUri || this._webApiConfiguration.getHostUri()) + this.getBasePath();
    }

    /**
     * Should return the base path from which api endpoint paths are appended
     */

  }, {
    key: 'getBasePath',
    value: function getBasePath() {
      throw new Error('Abstract method "getBasePath" must be implemented');
    }

    /**
     * Set the Upwork organization id which is required to make requests on the user preferences service
     * @param {string} orgId
     * @return {WebApiService}
     */

  }, {
    key: 'setOrgId',
    value: function setOrgId(orgId) {
      this._config.orgId = orgId;
      return this;
    }

    /**
     * Fetch the organization id contextf
     * @return {string}
     */

  }, {
    key: 'getOrgId',
    value: function getOrgId() {
      return this._config.orgId || this._webApiConfiguration.getOrgId();
    }

    /**
     * Set the Upwork user id which is used as the default value for the user id if not provided by the consumer
     * @param {string} userId
     * @return {WebApiService}
     */

  }, {
    key: 'setUserId',
    value: function setUserId(userId) {
      this._config.userId = userId;
      return this;
    }

    /**
     * Fetch the user id context
     * @return {string}
     */

  }, {
    key: 'getUserId',
    value: function getUserId() {
      return this._config.userId || this._webApiConfiguration.getUserId();
    }
    /**
     * Set the Upwork organization id which is required to make requests on the graphql service
     * @param {string} oAuthToken
     * @return {WebApiService}
     */

  }, {
    key: 'setOAuthToken',
    value: function setOAuthToken(oAuthToken) {
      this._config.oAuthToken = oAuthToken;
      return this;
    }

    /**
     * Fetch the OAuth token
     * @return {string}
     */

  }, {
    key: 'getOAuthToken',
    value: function getOAuthToken() {
      return this._config.oAuthToken || this._webApiConfiguration.getOAuthToken();
    }

    /**
     * Stub meant to provide consumers a mechanism to refresh the oAuthToken
     * when 401 errors are detected
     *
     * @return {Promise} a promise that resolves with a fresh oAuth token
     */

  }, {
    key: 'handleAuthorizationFailure',
    value: function handleAuthorizationFailure() {
      return Promise.reject('Please implement a solution to handle authorization failures');
    }
  }]);

  return WebApiService;
}(_service2.default);

exports.default = WebApiService;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(65);
module.exports = __webpack_require__(23).Object.assign;


/***/ }),
/* 23 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.5.3' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 24 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(43);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 26 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(25);
var defined = __webpack_require__(24);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _serviceProvider = __webpack_require__(0);

var _serviceProvider2 = _interopRequireDefault(_serviceProvider);

var _idmapService = __webpack_require__(12);

var _idmapService2 = _interopRequireDefault(_idmapService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Client Provider
 */
var IdMapServiceProvider = function (_ServiceProvider) {
  _inherits(IdMapServiceProvider, _ServiceProvider);

  /**
   * Create instance
   */
  function IdMapServiceProvider() {
    _classCallCheck(this, IdMapServiceProvider);

    // The service factory is passed as a constructor argument
    return _possibleConstructorReturn(this, (IdMapServiceProvider.__proto__ || Object.getPrototypeOf(IdMapServiceProvider)).call(this, function (configuration, webApiConfiguration, webApiAuth) {
      return new _idmapService2.default(configuration, webApiConfiguration, webApiAuth);
    }));
  }

  return IdMapServiceProvider;
}(_serviceProvider2.default);

exports.default = IdMapServiceProvider;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _serviceProvider = __webpack_require__(0);

var _serviceProvider2 = _interopRequireDefault(_serviceProvider);

var _notificationService = __webpack_require__(13);

var _notificationService2 = _interopRequireDefault(_notificationService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Notification Web Api Client Provider
 */
var NotificationProvider = function (_ServiceProvider) {
  _inherits(NotificationProvider, _ServiceProvider);

  /**
   * Create instance
   */
  function NotificationProvider() {
    _classCallCheck(this, NotificationProvider);

    // The service factory is passed as a constructor argument
    return _possibleConstructorReturn(this, (NotificationProvider.__proto__ || Object.getPrototypeOf(NotificationProvider)).call(this, function (configuration, webApiConfiguration, webApiAuth) {
      return new _notificationService2.default(configuration, webApiConfiguration, webApiAuth);
    }));
  }

  return NotificationProvider;
}(_serviceProvider2.default);

exports.default = NotificationProvider;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _serviceProvider = __webpack_require__(0);

var _serviceProvider2 = _interopRequireDefault(_serviceProvider);

var _roomService = __webpack_require__(14);

var _roomService2 = _interopRequireDefault(_roomService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Client Provider
 */
var RoomServiceProvider = function (_ServiceProvider) {
  _inherits(RoomServiceProvider, _ServiceProvider);

  /**
   * Create instance
   */
  function RoomServiceProvider() {
    _classCallCheck(this, RoomServiceProvider);

    // The service factory is passed as a constructor argument
    return _possibleConstructorReturn(this, (RoomServiceProvider.__proto__ || Object.getPrototypeOf(RoomServiceProvider)).call(this, function (configuration, webApiConfiguration, webApiAuth) {
      return new _roomService2.default(configuration, webApiConfiguration, webApiAuth);
    }));
  }

  return RoomServiceProvider;
}(_serviceProvider2.default);

exports.default = RoomServiceProvider;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _serviceProvider = __webpack_require__(0);

var _serviceProvider2 = _interopRequireDefault(_serviceProvider);

var _searchService = __webpack_require__(15);

var _searchService2 = _interopRequireDefault(_searchService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Client Provider
 */
var SearchServiceProvider = function (_ServiceProvider) {
  _inherits(SearchServiceProvider, _ServiceProvider);

  /**
   * Create instance
   */
  function SearchServiceProvider() {
    _classCallCheck(this, SearchServiceProvider);

    // The service factory is passed as a constructor argument
    return _possibleConstructorReturn(this, (SearchServiceProvider.__proto__ || Object.getPrototypeOf(SearchServiceProvider)).call(this, function (configuration, webApiConfiguration, webApiAuth) {
      return new _searchService2.default(configuration, webApiConfiguration, webApiAuth);
    }));
  }

  return SearchServiceProvider;
}(_serviceProvider2.default);

exports.default = SearchServiceProvider;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _serviceProvider = __webpack_require__(0);

var _serviceProvider2 = _interopRequireDefault(_serviceProvider);

var _userPreferencesService = __webpack_require__(16);

var _userPreferencesService2 = _interopRequireDefault(_userPreferencesService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Client Provider
 */
var UserPreferencesProvider = function (_ServiceProvider) {
  _inherits(UserPreferencesProvider, _ServiceProvider);

  /**
   * Create instance
   */
  function UserPreferencesProvider() {
    _classCallCheck(this, UserPreferencesProvider);

    // The service factory is passed as a constructor argument
    return _possibleConstructorReturn(this, (UserPreferencesProvider.__proto__ || Object.getPrototypeOf(UserPreferencesProvider)).call(this, function (configuration, webApiConfiguration, webApiAuth) {
      return new _userPreferencesService2.default(configuration, webApiConfiguration, webApiAuth);
    }));
  }

  return UserPreferencesProvider;
}(_serviceProvider2.default);

exports.default = UserPreferencesProvider;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _serviceProvider = __webpack_require__(0);

var _serviceProvider2 = _interopRequireDefault(_serviceProvider);

var _userQtService = __webpack_require__(17);

var _userQtService2 = _interopRequireDefault(_userQtService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Client Provider
 */
var UserQtProvider = function (_ServiceProvider) {
  _inherits(UserQtProvider, _ServiceProvider);

  /**
   * Create instance
   */
  function UserQtProvider() {
    _classCallCheck(this, UserQtProvider);

    // The service factory is passed as a constructor argument
    return _possibleConstructorReturn(this, (UserQtProvider.__proto__ || Object.getPrototypeOf(UserQtProvider)).call(this, function (configuration, webApiConfiguration, webApiAuth) {
      return new _userQtService2.default(configuration, webApiConfiguration, webApiAuth);
    }));
  }

  return UserQtProvider;
}(_serviceProvider2.default);

exports.default = UserQtProvider;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _serviceProvider = __webpack_require__(0);

var _serviceProvider2 = _interopRequireDefault(_serviceProvider);

var _webApiAuthService = __webpack_require__(18);

var _webApiAuthService2 = _interopRequireDefault(_webApiAuthService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Auth Provider
 */
var WebApiAuthProvider = function (_ServiceProvider) {
  _inherits(WebApiAuthProvider, _ServiceProvider);

  /**
   * Create instance
   */
  function WebApiAuthProvider() {
    _classCallCheck(this, WebApiAuthProvider);

    // The service factory is passed as a constructor argument
    return _possibleConstructorReturn(this, (WebApiAuthProvider.__proto__ || Object.getPrototypeOf(WebApiAuthProvider)).call(this, function (configuration) {
      return new _webApiAuthService2.default(configuration);
    }));
  }

  return WebApiAuthProvider;
}(_serviceProvider2.default);

exports.default = WebApiAuthProvider;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _serviceProvider = __webpack_require__(0);

var _serviceProvider2 = _interopRequireDefault(_serviceProvider);

var _webApiConfigurationService = __webpack_require__(19);

var _webApiConfigurationService2 = _interopRequireDefault(_webApiConfigurationService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Upwork Web Api Client Provider
 */
var WebApiConfigurationProvider = function (_ServiceProvider) {
  _inherits(WebApiConfigurationProvider, _ServiceProvider);

  /**
   * Create instance
   */
  function WebApiConfigurationProvider() {
    _classCallCheck(this, WebApiConfigurationProvider);

    // The service factory is passed as a constructor argument
    return _possibleConstructorReturn(this, (WebApiConfigurationProvider.__proto__ || Object.getPrototypeOf(WebApiConfigurationProvider)).call(this, function (configuration) {
      return new _webApiConfigurationService2.default(configuration);
    }));
  }

  return WebApiConfigurationProvider;
}(_serviceProvider2.default);

exports.default = WebApiConfigurationProvider;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = '6.1.0';

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.4+314e4831
 */

(function (global, factory) {
	 true ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.ES6Promise = factory());
}(this, (function () { 'use strict';

function objectOrFunction(x) {
  var type = typeof x;
  return x !== null && (type === 'object' || type === 'function');
}

function isFunction(x) {
  return typeof x === 'function';
}



var _isArray = void 0;
if (Array.isArray) {
  _isArray = Array.isArray;
} else {
  _isArray = function (x) {
    return Object.prototype.toString.call(x) === '[object Array]';
  };
}

var isArray = _isArray;

var len = 0;
var vertxNext = void 0;
var customSchedulerFn = void 0;

var asap = function asap(callback, arg) {
  queue[len] = callback;
  queue[len + 1] = arg;
  len += 2;
  if (len === 2) {
    // If len is 2, that means that we need to schedule an async flush.
    // If additional callbacks are queued before the queue is flushed, they
    // will be processed by this flush that we are scheduling.
    if (customSchedulerFn) {
      customSchedulerFn(flush);
    } else {
      scheduleFlush();
    }
  }
};

function setScheduler(scheduleFn) {
  customSchedulerFn = scheduleFn;
}

function setAsap(asapFn) {
  asap = asapFn;
}

var browserWindow = typeof window !== 'undefined' ? window : undefined;
var browserGlobal = browserWindow || {};
var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

// test for web worker but not in IE10
var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

// node
function useNextTick() {
  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
  // see https://github.com/cujojs/when/issues/410 for details
  return function () {
    return process.nextTick(flush);
  };
}

// vertx
function useVertxTimer() {
  if (typeof vertxNext !== 'undefined') {
    return function () {
      vertxNext(flush);
    };
  }

  return useSetTimeout();
}

function useMutationObserver() {
  var iterations = 0;
  var observer = new BrowserMutationObserver(flush);
  var node = document.createTextNode('');
  observer.observe(node, { characterData: true });

  return function () {
    node.data = iterations = ++iterations % 2;
  };
}

// web worker
function useMessageChannel() {
  var channel = new MessageChannel();
  channel.port1.onmessage = flush;
  return function () {
    return channel.port2.postMessage(0);
  };
}

function useSetTimeout() {
  // Store setTimeout reference so es6-promise will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var globalSetTimeout = setTimeout;
  return function () {
    return globalSetTimeout(flush, 1);
  };
}

var queue = new Array(1000);
function flush() {
  for (var i = 0; i < len; i += 2) {
    var callback = queue[i];
    var arg = queue[i + 1];

    callback(arg);

    queue[i] = undefined;
    queue[i + 1] = undefined;
  }

  len = 0;
}

function attemptVertx() {
  try {
    var vertx = Function('return this')().require('vertx');
    vertxNext = vertx.runOnLoop || vertx.runOnContext;
    return useVertxTimer();
  } catch (e) {
    return useSetTimeout();
  }
}

var scheduleFlush = void 0;
// Decide what async method to use to triggering processing of queued callbacks:
if (isNode) {
  scheduleFlush = useNextTick();
} else if (BrowserMutationObserver) {
  scheduleFlush = useMutationObserver();
} else if (isWorker) {
  scheduleFlush = useMessageChannel();
} else if (browserWindow === undefined && "function" === 'function') {
  scheduleFlush = attemptVertx();
} else {
  scheduleFlush = useSetTimeout();
}

function then(onFulfillment, onRejection) {
  var parent = this;

  var child = new this.constructor(noop);

  if (child[PROMISE_ID] === undefined) {
    makePromise(child);
  }

  var _state = parent._state;


  if (_state) {
    var callback = arguments[_state - 1];
    asap(function () {
      return invokeCallback(_state, child, callback, parent._result);
    });
  } else {
    subscribe(parent, child, onFulfillment, onRejection);
  }

  return child;
}

/**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @static
  @param {Any} value value that the returned promise will be resolved with
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
function resolve$1(object) {
  /*jshint validthis:true */
  var Constructor = this;

  if (object && typeof object === 'object' && object.constructor === Constructor) {
    return object;
  }

  var promise = new Constructor(noop);
  resolve(promise, object);
  return promise;
}

var PROMISE_ID = Math.random().toString(36).substring(2);

function noop() {}

var PENDING = void 0;
var FULFILLED = 1;
var REJECTED = 2;

var TRY_CATCH_ERROR = { error: null };

function selfFulfillment() {
  return new TypeError("You cannot resolve a promise with itself");
}

function cannotReturnOwn() {
  return new TypeError('A promises callback cannot return that same promise.');
}

function getThen(promise) {
  try {
    return promise.then;
  } catch (error) {
    TRY_CATCH_ERROR.error = error;
    return TRY_CATCH_ERROR;
  }
}

function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
  try {
    then$$1.call(value, fulfillmentHandler, rejectionHandler);
  } catch (e) {
    return e;
  }
}

function handleForeignThenable(promise, thenable, then$$1) {
  asap(function (promise) {
    var sealed = false;
    var error = tryThen(then$$1, thenable, function (value) {
      if (sealed) {
        return;
      }
      sealed = true;
      if (thenable !== value) {
        resolve(promise, value);
      } else {
        fulfill(promise, value);
      }
    }, function (reason) {
      if (sealed) {
        return;
      }
      sealed = true;

      reject(promise, reason);
    }, 'Settle: ' + (promise._label || ' unknown promise'));

    if (!sealed && error) {
      sealed = true;
      reject(promise, error);
    }
  }, promise);
}

function handleOwnThenable(promise, thenable) {
  if (thenable._state === FULFILLED) {
    fulfill(promise, thenable._result);
  } else if (thenable._state === REJECTED) {
    reject(promise, thenable._result);
  } else {
    subscribe(thenable, undefined, function (value) {
      return resolve(promise, value);
    }, function (reason) {
      return reject(promise, reason);
    });
  }
}

function handleMaybeThenable(promise, maybeThenable, then$$1) {
  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
    handleOwnThenable(promise, maybeThenable);
  } else {
    if (then$$1 === TRY_CATCH_ERROR) {
      reject(promise, TRY_CATCH_ERROR.error);
      TRY_CATCH_ERROR.error = null;
    } else if (then$$1 === undefined) {
      fulfill(promise, maybeThenable);
    } else if (isFunction(then$$1)) {
      handleForeignThenable(promise, maybeThenable, then$$1);
    } else {
      fulfill(promise, maybeThenable);
    }
  }
}

function resolve(promise, value) {
  if (promise === value) {
    reject(promise, selfFulfillment());
  } else if (objectOrFunction(value)) {
    handleMaybeThenable(promise, value, getThen(value));
  } else {
    fulfill(promise, value);
  }
}

function publishRejection(promise) {
  if (promise._onerror) {
    promise._onerror(promise._result);
  }

  publish(promise);
}

function fulfill(promise, value) {
  if (promise._state !== PENDING) {
    return;
  }

  promise._result = value;
  promise._state = FULFILLED;

  if (promise._subscribers.length !== 0) {
    asap(publish, promise);
  }
}

function reject(promise, reason) {
  if (promise._state !== PENDING) {
    return;
  }
  promise._state = REJECTED;
  promise._result = reason;

  asap(publishRejection, promise);
}

function subscribe(parent, child, onFulfillment, onRejection) {
  var _subscribers = parent._subscribers;
  var length = _subscribers.length;


  parent._onerror = null;

  _subscribers[length] = child;
  _subscribers[length + FULFILLED] = onFulfillment;
  _subscribers[length + REJECTED] = onRejection;

  if (length === 0 && parent._state) {
    asap(publish, parent);
  }
}

function publish(promise) {
  var subscribers = promise._subscribers;
  var settled = promise._state;

  if (subscribers.length === 0) {
    return;
  }

  var child = void 0,
      callback = void 0,
      detail = promise._result;

  for (var i = 0; i < subscribers.length; i += 3) {
    child = subscribers[i];
    callback = subscribers[i + settled];

    if (child) {
      invokeCallback(settled, child, callback, detail);
    } else {
      callback(detail);
    }
  }

  promise._subscribers.length = 0;
}

function tryCatch(callback, detail) {
  try {
    return callback(detail);
  } catch (e) {
    TRY_CATCH_ERROR.error = e;
    return TRY_CATCH_ERROR;
  }
}

function invokeCallback(settled, promise, callback, detail) {
  var hasCallback = isFunction(callback),
      value = void 0,
      error = void 0,
      succeeded = void 0,
      failed = void 0;

  if (hasCallback) {
    value = tryCatch(callback, detail);

    if (value === TRY_CATCH_ERROR) {
      failed = true;
      error = value.error;
      value.error = null;
    } else {
      succeeded = true;
    }

    if (promise === value) {
      reject(promise, cannotReturnOwn());
      return;
    }
  } else {
    value = detail;
    succeeded = true;
  }

  if (promise._state !== PENDING) {
    // noop
  } else if (hasCallback && succeeded) {
    resolve(promise, value);
  } else if (failed) {
    reject(promise, error);
  } else if (settled === FULFILLED) {
    fulfill(promise, value);
  } else if (settled === REJECTED) {
    reject(promise, value);
  }
}

function initializePromise(promise, resolver) {
  try {
    resolver(function resolvePromise(value) {
      resolve(promise, value);
    }, function rejectPromise(reason) {
      reject(promise, reason);
    });
  } catch (e) {
    reject(promise, e);
  }
}

var id = 0;
function nextId() {
  return id++;
}

function makePromise(promise) {
  promise[PROMISE_ID] = id++;
  promise._state = undefined;
  promise._result = undefined;
  promise._subscribers = [];
}

function validationError() {
  return new Error('Array Methods must be provided an Array');
}

var Enumerator = function () {
  function Enumerator(Constructor, input) {
    this._instanceConstructor = Constructor;
    this.promise = new Constructor(noop);

    if (!this.promise[PROMISE_ID]) {
      makePromise(this.promise);
    }

    if (isArray(input)) {
      this.length = input.length;
      this._remaining = input.length;

      this._result = new Array(this.length);

      if (this.length === 0) {
        fulfill(this.promise, this._result);
      } else {
        this.length = this.length || 0;
        this._enumerate(input);
        if (this._remaining === 0) {
          fulfill(this.promise, this._result);
        }
      }
    } else {
      reject(this.promise, validationError());
    }
  }

  Enumerator.prototype._enumerate = function _enumerate(input) {
    for (var i = 0; this._state === PENDING && i < input.length; i++) {
      this._eachEntry(input[i], i);
    }
  };

  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
    var c = this._instanceConstructor;
    var resolve$$1 = c.resolve;


    if (resolve$$1 === resolve$1) {
      var _then = getThen(entry);

      if (_then === then && entry._state !== PENDING) {
        this._settledAt(entry._state, i, entry._result);
      } else if (typeof _then !== 'function') {
        this._remaining--;
        this._result[i] = entry;
      } else if (c === Promise$1) {
        var promise = new c(noop);
        handleMaybeThenable(promise, entry, _then);
        this._willSettleAt(promise, i);
      } else {
        this._willSettleAt(new c(function (resolve$$1) {
          return resolve$$1(entry);
        }), i);
      }
    } else {
      this._willSettleAt(resolve$$1(entry), i);
    }
  };

  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
    var promise = this.promise;


    if (promise._state === PENDING) {
      this._remaining--;

      if (state === REJECTED) {
        reject(promise, value);
      } else {
        this._result[i] = value;
      }
    }

    if (this._remaining === 0) {
      fulfill(promise, this._result);
    }
  };

  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
    var enumerator = this;

    subscribe(promise, undefined, function (value) {
      return enumerator._settledAt(FULFILLED, i, value);
    }, function (reason) {
      return enumerator._settledAt(REJECTED, i, reason);
    });
  };

  return Enumerator;
}();

/**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @static
  @param {Array} entries array of promises
  @param {String} label optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/
function all(entries) {
  return new Enumerator(this, entries).promise;
}

/**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param {Array} promises array of promises to observe
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/
function race(entries) {
  /*jshint validthis:true */
  var Constructor = this;

  if (!isArray(entries)) {
    return new Constructor(function (_, reject) {
      return reject(new TypeError('You must pass an array to race.'));
    });
  } else {
    return new Constructor(function (resolve, reject) {
      var length = entries.length;
      for (var i = 0; i < length; i++) {
        Constructor.resolve(entries[i]).then(resolve, reject);
      }
    });
  }
}

/**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @static
  @param {Any} reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/
function reject$1(reason) {
  /*jshint validthis:true */
  var Constructor = this;
  var promise = new Constructor(noop);
  reject(promise, reason);
  return promise;
}

function needsResolver() {
  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
}

function needsNew() {
  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
}

/**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise's eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @param {Function} resolver
  Useful for tooling.
  @constructor
*/

var Promise$1 = function () {
  function Promise(resolver) {
    this[PROMISE_ID] = nextId();
    this._result = this._state = undefined;
    this._subscribers = [];

    if (noop !== resolver) {
      typeof resolver !== 'function' && needsResolver();
      this instanceof Promise ? initializePromise(this, resolver) : needsNew();
    }
  }

  /**
  The primary way of interacting with a promise is through its `then` method,
  which registers callbacks to receive either a promise's eventual value or the
  reason why the promise cannot be fulfilled.
   ```js
  findUser().then(function(user){
    // user is available
  }, function(reason){
    // user is unavailable, and you are given the reason why
  });
  ```
   Chaining
  --------
   The return value of `then` is itself a promise.  This second, 'downstream'
  promise is resolved with the return value of the first promise's fulfillment
  or rejection handler, or rejected if the handler throws an exception.
   ```js
  findUser().then(function (user) {
    return user.name;
  }, function (reason) {
    return 'default name';
  }).then(function (userName) {
    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
    // will be `'default name'`
  });
   findUser().then(function (user) {
    throw new Error('Found user, but still unhappy');
  }, function (reason) {
    throw new Error('`findUser` rejected and we're unhappy');
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
  });
  ```
  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
   ```js
  findUser().then(function (user) {
    throw new PedagogicalException('Upstream error');
  }).then(function (value) {
    // never reached
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // The `PedgagocialException` is propagated all the way down to here
  });
  ```
   Assimilation
  ------------
   Sometimes the value you want to propagate to a downstream promise can only be
  retrieved asynchronously. This can be achieved by returning a promise in the
  fulfillment or rejection handler. The downstream promise will then be pending
  until the returned promise is settled. This is called *assimilation*.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // The user's comments are now available
  });
  ```
   If the assimliated promise rejects, then the downstream promise will also reject.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // If `findCommentsByAuthor` fulfills, we'll have the value here
  }, function (reason) {
    // If `findCommentsByAuthor` rejects, we'll have the reason here
  });
  ```
   Simple Example
  --------------
   Synchronous Example
   ```javascript
  let result;
   try {
    result = findResult();
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
  findResult(function(result, err){
    if (err) {
      // failure
    } else {
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findResult().then(function(result){
    // success
  }, function(reason){
    // failure
  });
  ```
   Advanced Example
  --------------
   Synchronous Example
   ```javascript
  let author, books;
   try {
    author = findAuthor();
    books  = findBooksByAuthor(author);
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
   function foundBooks(books) {
   }
   function failure(reason) {
   }
   findAuthor(function(author, err){
    if (err) {
      failure(err);
      // failure
    } else {
      try {
        findBoooksByAuthor(author, function(books, err) {
          if (err) {
            failure(err);
          } else {
            try {
              foundBooks(books);
            } catch(reason) {
              failure(reason);
            }
          }
        });
      } catch(error) {
        failure(err);
      }
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findAuthor().
    then(findBooksByAuthor).
    then(function(books){
      // found books
  }).catch(function(reason){
    // something went wrong
  });
  ```
   @method then
  @param {Function} onFulfilled
  @param {Function} onRejected
  Useful for tooling.
  @return {Promise}
  */

  /**
  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
  as the catch block of a try/catch statement.
  ```js
  function findAuthor(){
  throw new Error('couldn't find that author');
  }
  // synchronous
  try {
  findAuthor();
  } catch(reason) {
  // something went wrong
  }
  // async with promises
  findAuthor().catch(function(reason){
  // something went wrong
  });
  ```
  @method catch
  @param {Function} onRejection
  Useful for tooling.
  @return {Promise}
  */


  Promise.prototype.catch = function _catch(onRejection) {
    return this.then(null, onRejection);
  };

  /**
    `finally` will be invoked regardless of the promise's fate just as native
    try/catch/finally behaves
  
    Synchronous example:
  
    ```js
    findAuthor() {
      if (Math.random() > 0.5) {
        throw new Error();
      }
      return new Author();
    }
  
    try {
      return findAuthor(); // succeed or fail
    } catch(error) {
      return findOtherAuther();
    } finally {
      // always runs
      // doesn't affect the return value
    }
    ```
  
    Asynchronous example:
  
    ```js
    findAuthor().catch(function(reason){
      return findOtherAuther();
    }).finally(function(){
      // author was either found, or not
    });
    ```
  
    @method finally
    @param {Function} callback
    @return {Promise}
  */


  Promise.prototype.finally = function _finally(callback) {
    var promise = this;
    var constructor = promise.constructor;

    return promise.then(function (value) {
      return constructor.resolve(callback()).then(function () {
        return value;
      });
    }, function (reason) {
      return constructor.resolve(callback()).then(function () {
        throw reason;
      });
    });
  };

  return Promise;
}();

Promise$1.prototype.then = then;
Promise$1.all = all;
Promise$1.race = race;
Promise$1.resolve = resolve$1;
Promise$1.reject = reject$1;
Promise$1._setScheduler = setScheduler;
Promise$1._setAsap = setAsap;
Promise$1._asap = asap;

/*global self*/
function polyfill() {
  var local = void 0;

  if (typeof global !== 'undefined') {
    local = global;
  } else if (typeof self !== 'undefined') {
    local = self;
  } else {
    try {
      local = Function('return this')();
    } catch (e) {
      throw new Error('polyfill failed because global object is unavailable in this environment');
    }
  }

  var P = local.Promise;

  if (P) {
    var promiseToString = null;
    try {
      promiseToString = Object.prototype.toString.call(P.resolve());
    } catch (e) {
      // silently ignored
    }

    if (promiseToString === '[object Promise]' && !P.cast) {
      return;
    }
  }

  local.Promise = Promise$1;
}

// Strange compat..
Promise$1.polyfill = polyfill;
Promise$1.Promise = Promise$1;

return Promise$1;

})));



//# sourceMappingURL=es6-promise.map

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(66), __webpack_require__(67)))

/***/ }),
/* 38 */
/***/ (function(module, exports) {

(function(self) {
  'use strict';

  if (self.fetch) {
    return
  }

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob: 'FileReader' in self && 'Blob' in self && (function() {
      try {
        new Blob()
        return true
      } catch(e) {
        return false
      }
    })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ]

    var isDataView = function(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj)
    }

    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
    }
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name)
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value)
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift()
        return {done: value === undefined, value: value}
      }
    }

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      }
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {}

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value)
      }, this)
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1])
      }, this)
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name])
      }, this)
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name)
    value = normalizeValue(value)
    var oldValue = this.map[name]
    this.map[name] = oldValue ? oldValue+','+value : value
  }

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)]
  }

  Headers.prototype.get = function(name) {
    name = normalizeName(name)
    return this.has(name) ? this.map[name] : null
  }

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  }

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value)
  }

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this)
      }
    }
  }

  Headers.prototype.keys = function() {
    var items = []
    this.forEach(function(value, name) { items.push(name) })
    return iteratorFor(items)
  }

  Headers.prototype.values = function() {
    var items = []
    this.forEach(function(value) { items.push(value) })
    return iteratorFor(items)
  }

  Headers.prototype.entries = function() {
    var items = []
    this.forEach(function(value, name) { items.push([name, value]) })
    return iteratorFor(items)
  }

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result)
      }
      reader.onerror = function() {
        reject(reader.error)
      }
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader()
    var promise = fileReaderReady(reader)
    reader.readAsArrayBuffer(blob)
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader()
    var promise = fileReaderReady(reader)
    reader.readAsText(blob)
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf)
    var chars = new Array(view.length)

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i])
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength)
      view.set(new Uint8Array(buf))
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false

    this._initBody = function(body) {
      this._bodyInit = body
      if (!body) {
        this._bodyText = ''
      } else if (typeof body === 'string') {
        this._bodyText = body
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString()
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer)
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer])
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body)
      } else {
        throw new Error('unsupported BodyInit type')
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8')
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type)
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
        }
      }
    }

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this)
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      }

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      }
    }

    this.text = function() {
      var rejected = consumed(this)
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    }

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      }
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    }

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

  function normalizeMethod(method) {
    var upcased = method.toUpperCase()
    return (methods.indexOf(upcased) > -1) ? upcased : method
  }

  function Request(input, options) {
    options = options || {}
    var body = options.body

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url
      this.credentials = input.credentials
      if (!options.headers) {
        this.headers = new Headers(input.headers)
      }
      this.method = input.method
      this.mode = input.mode
      if (!body && input._bodyInit != null) {
        body = input._bodyInit
        input.bodyUsed = true
      }
    } else {
      this.url = String(input)
    }

    this.credentials = options.credentials || this.credentials || 'omit'
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers)
    }
    this.method = normalizeMethod(options.method || this.method || 'GET')
    this.mode = options.mode || this.mode || null
    this.referrer = null

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body)
  }

  Request.prototype.clone = function() {
    return new Request(this, { body: this._bodyInit })
  }

  function decode(body) {
    var form = new FormData()
    body.trim().split('&').forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=')
        var name = split.shift().replace(/\+/g, ' ')
        var value = split.join('=').replace(/\+/g, ' ')
        form.append(decodeURIComponent(name), decodeURIComponent(value))
      }
    })
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers()
    rawHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':')
      var key = parts.shift().trim()
      if (key) {
        var value = parts.join(':').trim()
        headers.append(key, value)
      }
    })
    return headers
  }

  Body.call(Request.prototype)

  function Response(bodyInit, options) {
    if (!options) {
      options = {}
    }

    this.type = 'default'
    this.status = 'status' in options ? options.status : 200
    this.ok = this.status >= 200 && this.status < 300
    this.statusText = 'statusText' in options ? options.statusText : 'OK'
    this.headers = new Headers(options.headers)
    this.url = options.url || ''
    this._initBody(bodyInit)
  }

  Body.call(Response.prototype)

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  }

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''})
    response.type = 'error'
    return response
  }

  var redirectStatuses = [301, 302, 303, 307, 308]

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  }

  self.Headers = Headers
  self.Request = Request
  self.Response = Response

  self.fetch = function(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init)
      var xhr = new XMLHttpRequest()

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        }
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
        var body = 'response' in xhr ? xhr.response : xhr.responseText
        resolve(new Response(body, options))
      }

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.open(request.method, request.url, true)

      if (request.credentials === 'include') {
        xhr.withCredentials = true
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob'
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
    })
  }
  self.fetch.polyfill = true
})(typeof self !== 'undefined' ? self : this);


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IdMapServiceProvider = exports.IdMapService = exports.SearchProvider = exports.SearchService = exports.NotificationService = exports.NotificationProvider = exports.UserQtProvider = exports.UserQtService = exports.RoomServiceProvider = exports.RoomService = exports.UserPreferencesService = exports.UserPreferencesProvider = exports.WebApiAuthService = exports.WebApiAuthProvider = exports.WebApiConfigurationService = exports.WebApiConfigurationProvider = exports.VERSION = undefined;

var _es6Promise = __webpack_require__(37);

__webpack_require__(38);

var _version = __webpack_require__(36);

var _version2 = _interopRequireDefault(_version);

var _userPreferencesProvider = __webpack_require__(32);

var _userPreferencesProvider2 = _interopRequireDefault(_userPreferencesProvider);

var _userPreferencesService = __webpack_require__(16);

var _userPreferencesService2 = _interopRequireDefault(_userPreferencesService);

var _webApiConfigurationProvider = __webpack_require__(35);

var _webApiConfigurationProvider2 = _interopRequireDefault(_webApiConfigurationProvider);

var _webApiConfigurationService = __webpack_require__(19);

var _webApiConfigurationService2 = _interopRequireDefault(_webApiConfigurationService);

var _webApiAuthProvider = __webpack_require__(34);

var _webApiAuthProvider2 = _interopRequireDefault(_webApiAuthProvider);

var _webApiAuthService = __webpack_require__(18);

var _webApiAuthService2 = _interopRequireDefault(_webApiAuthService);

var _roomService = __webpack_require__(14);

var _roomService2 = _interopRequireDefault(_roomService);

var _roomServiceProvider = __webpack_require__(30);

var _roomServiceProvider2 = _interopRequireDefault(_roomServiceProvider);

var _userQtService = __webpack_require__(17);

var _userQtService2 = _interopRequireDefault(_userQtService);

var _userQtProvider = __webpack_require__(33);

var _userQtProvider2 = _interopRequireDefault(_userQtProvider);

var _notificationProvider = __webpack_require__(29);

var _notificationProvider2 = _interopRequireDefault(_notificationProvider);

var _notificationService = __webpack_require__(13);

var _notificationService2 = _interopRequireDefault(_notificationService);

var _searchService = __webpack_require__(15);

var _searchService2 = _interopRequireDefault(_searchService);

var _searchServiceProvider = __webpack_require__(31);

var _searchServiceProvider2 = _interopRequireDefault(_searchServiceProvider);

var _idmapService = __webpack_require__(12);

var _idmapService2 = _interopRequireDefault(_idmapService);

var _idmapServiceProvider = __webpack_require__(28);

var _idmapServiceProvider2 = _interopRequireDefault(_idmapServiceProvider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _es6Promise.polyfill)();
exports.VERSION = _version2.default;
exports.WebApiConfigurationProvider = _webApiConfigurationProvider2.default;
exports.WebApiConfigurationService = _webApiConfigurationService2.default;
exports.WebApiAuthProvider = _webApiAuthProvider2.default;
exports.WebApiAuthService = _webApiAuthService2.default;
exports.UserPreferencesProvider = _userPreferencesProvider2.default;
exports.UserPreferencesService = _userPreferencesService2.default;
exports.RoomService = _roomService2.default;
exports.RoomServiceProvider = _roomServiceProvider2.default;
exports.UserQtService = _userQtService2.default;
exports.UserQtProvider = _userQtProvider2.default;
exports.NotificationProvider = _notificationProvider2.default;
exports.NotificationService = _notificationService2.default;
exports.SearchService = _searchService2.default;
exports.SearchProvider = _searchServiceProvider2.default;
exports.IdMapService = _idmapService2.default;
exports.IdMapServiceProvider = _idmapServiceProvider2.default;

/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(11);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(27);
var toLength = __webpack_require__(61);
var toAbsoluteIndex = __webpack_require__(60);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 43 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(40);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(11);
var document = __webpack_require__(10).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 46 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(10);
var core = __webpack_require__(23);
var ctx = __webpack_require__(44);
var hide = __webpack_require__(49);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && key in exports) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 48 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(52);
var createDesc = __webpack_require__(57);
module.exports = __webpack_require__(8) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(8) && !__webpack_require__(9)(function () {
  return Object.defineProperty(__webpack_require__(45)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = __webpack_require__(55);
var gOPS = __webpack_require__(53);
var pIE = __webpack_require__(56);
var toObject = __webpack_require__(62);
var IObject = __webpack_require__(25);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(9)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(41);
var IE8_DOM_DEFINE = __webpack_require__(50);
var toPrimitive = __webpack_require__(63);
var dP = Object.defineProperty;

exports.f = __webpack_require__(8) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 53 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(48);
var toIObject = __webpack_require__(27);
var arrayIndexOf = __webpack_require__(42)(false);
var IE_PROTO = __webpack_require__(58)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(54);
var enumBugKeys = __webpack_require__(46);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 56 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 57 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(59)('keys');
var uid = __webpack_require__(64);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(10);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
module.exports = function (key) {
  return store[key] || (store[key] = {});
};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(26);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(26);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(24);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(11);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 64 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(47);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(51) });


/***/ }),
/* 66 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 67 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = __webpack_require__(1);

var _angular2 = _interopRequireDefault(_angular);

var _angularApiCore = __webpack_require__(2);

var _angularApiCore2 = _interopRequireDefault(_angularApiCore);

var _angularWebApiConfigurationService = __webpack_require__(4);

var _angularWebApiConfigurationService2 = _interopRequireDefault(_angularWebApiConfigurationService);

var _angularWebApiAuthService = __webpack_require__(3);

var _angularWebApiAuthService2 = _interopRequireDefault(_angularWebApiAuthService);

var _idmapService = __webpack_require__(12);

var _idmapService2 = _interopRequireDefault(_idmapService);

var _idmapServiceProvider = __webpack_require__(28);

var _idmapServiceProvider2 = _interopRequireDefault(_idmapServiceProvider);

var _frameworkBridgeAngular = __webpack_require__(6);

var _frameworkBridgeAngular2 = _interopRequireDefault(_frameworkBridgeAngular);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var frameworkBridge = new _frameworkBridgeAngular2.default();
/* eslint-disable no-invalid-this */

exports.default = _angular2.default.module('up.webApi.idMapService', [_angularApiCore2.default, _angularWebApiConfigurationService2.default, _angularWebApiAuthService2.default]).constant('UP_IDMAP_API_PROVIDER_CLASS', _idmapServiceProvider2.default).provider('upIdMapApi', frameworkBridge.createProviderFactory('UP_IDMAP_API_PROVIDER_CLASS', 'upWebApiConfiguration', 'upWebApiAuth')).config(frameworkBridge.createServiceDecoratorConfigBlock('upIdMapApi', _idmapService2.default)).name;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = __webpack_require__(1);

var _angular2 = _interopRequireDefault(_angular);

var _angularApiCore = __webpack_require__(2);

var _angularApiCore2 = _interopRequireDefault(_angularApiCore);

var _angularWebApiConfigurationService = __webpack_require__(4);

var _angularWebApiConfigurationService2 = _interopRequireDefault(_angularWebApiConfigurationService);

var _angularWebApiAuthService = __webpack_require__(3);

var _angularWebApiAuthService2 = _interopRequireDefault(_angularWebApiAuthService);

var _notificationService = __webpack_require__(13);

var _notificationService2 = _interopRequireDefault(_notificationService);

var _notificationProvider = __webpack_require__(29);

var _notificationProvider2 = _interopRequireDefault(_notificationProvider);

var _frameworkBridgeAngular = __webpack_require__(6);

var _frameworkBridgeAngular2 = _interopRequireDefault(_frameworkBridgeAngular);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var frameworkBridge = new _frameworkBridgeAngular2.default(); /* eslint-disable no-invalid-this */

exports.default = _angular2.default.module('up.webApi.notification', [_angularApiCore2.default, _angularWebApiConfigurationService2.default, _angularWebApiAuthService2.default]).constant('UP_NOTIFICATION_API_PROVIDER_CLASS', _notificationProvider2.default).provider('upNotificationApi', frameworkBridge.createProviderFactory('UP_NOTIFICATION_API_PROVIDER_CLASS', 'upWebApiConfiguration', 'upWebApiAuth')).config(frameworkBridge.createServiceDecoratorConfigBlock('upNotificationApi', _notificationService2.default)).name;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = __webpack_require__(1);

var _angular2 = _interopRequireDefault(_angular);

var _angularApiCore = __webpack_require__(2);

var _angularApiCore2 = _interopRequireDefault(_angularApiCore);

var _angularWebApiConfigurationService = __webpack_require__(4);

var _angularWebApiConfigurationService2 = _interopRequireDefault(_angularWebApiConfigurationService);

var _angularWebApiAuthService = __webpack_require__(3);

var _angularWebApiAuthService2 = _interopRequireDefault(_angularWebApiAuthService);

var _roomServiceProvider = __webpack_require__(30);

var _roomServiceProvider2 = _interopRequireDefault(_roomServiceProvider);

var _roomService = __webpack_require__(14);

var _roomService2 = _interopRequireDefault(_roomService);

var _frameworkBridgeAngular = __webpack_require__(6);

var _frameworkBridgeAngular2 = _interopRequireDefault(_frameworkBridgeAngular);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var frameworkBridge = new _frameworkBridgeAngular2.default(); /* eslint-disable no-invalid-this */

exports.default = _angular2.default.module('up.webApi.roomService', [_angularApiCore2.default, _angularWebApiConfigurationService2.default, _angularWebApiAuthService2.default]).constant('UP_ROOM_SERVICE_PROVIDER_CLASS', _roomServiceProvider2.default).provider('upRoomService', frameworkBridge.createDeprecatedServiceProviderFactory('upRoomService', 'upRoomApi', 'UP_ROOM_SERVICE_PROVIDER_CLASS', 'upWebApiConfiguration', 'upWebApiAuth')).config(frameworkBridge.createServiceDecoratorConfigBlock('upRoomService', _roomService2.default)).constant('UP_ROOM_API_PROVIDER_CLASS', _roomServiceProvider2.default).provider('upRoomApi', frameworkBridge.createProviderFactory('UP_ROOM_API_PROVIDER_CLASS', 'upWebApiConfiguration', 'upWebApiAuth')).config(frameworkBridge.createServiceDecoratorConfigBlock('upRoomApi', _roomService2.default)).name;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = __webpack_require__(1);

var _angular2 = _interopRequireDefault(_angular);

var _angularApiCore = __webpack_require__(2);

var _angularApiCore2 = _interopRequireDefault(_angularApiCore);

var _angularWebApiConfigurationService = __webpack_require__(4);

var _angularWebApiConfigurationService2 = _interopRequireDefault(_angularWebApiConfigurationService);

var _angularWebApiAuthService = __webpack_require__(3);

var _angularWebApiAuthService2 = _interopRequireDefault(_angularWebApiAuthService);

var _searchServiceProvider = __webpack_require__(31);

var _searchServiceProvider2 = _interopRequireDefault(_searchServiceProvider);

var _searchService = __webpack_require__(15);

var _searchService2 = _interopRequireDefault(_searchService);

var _frameworkBridgeAngular = __webpack_require__(6);

var _frameworkBridgeAngular2 = _interopRequireDefault(_frameworkBridgeAngular);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var frameworkBridge = new _frameworkBridgeAngular2.default(); /* eslint-disable no-invalid-this */

exports.default = _angular2.default.module('up.webApi.searchService', [_angularApiCore2.default, _angularWebApiConfigurationService2.default, _angularWebApiAuthService2.default]).constant('UP_SEARCH_API_PROVIDER_CLASS', _searchServiceProvider2.default).provider('upSearchApi', frameworkBridge.createProviderFactory('UP_SEARCH_API_PROVIDER_CLASS', 'upWebApiConfiguration', 'upWebApiAuth')).config(frameworkBridge.createServiceDecoratorConfigBlock('upSearchApi', _searchService2.default)).name;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = __webpack_require__(1);

var _angular2 = _interopRequireDefault(_angular);

var _angularApiCore = __webpack_require__(2);

var _angularApiCore2 = _interopRequireDefault(_angularApiCore);

var _angularWebApiConfigurationService = __webpack_require__(4);

var _angularWebApiConfigurationService2 = _interopRequireDefault(_angularWebApiConfigurationService);

var _angularWebApiAuthService = __webpack_require__(3);

var _angularWebApiAuthService2 = _interopRequireDefault(_angularWebApiAuthService);

var _userPreferencesProvider = __webpack_require__(32);

var _userPreferencesProvider2 = _interopRequireDefault(_userPreferencesProvider);

var _userPreferencesService = __webpack_require__(16);

var _userPreferencesService2 = _interopRequireDefault(_userPreferencesService);

var _frameworkBridgeAngular = __webpack_require__(6);

var _frameworkBridgeAngular2 = _interopRequireDefault(_frameworkBridgeAngular);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var frameworkBridge = new _frameworkBridgeAngular2.default(); /* eslint-disable no-invalid-this */

exports.default = _angular2.default.module('up.webApi.userPreferences', [_angularApiCore2.default, _angularWebApiConfigurationService2.default, _angularWebApiAuthService2.default]).constant('UP_USER_PREFERENCES_PROVIDER_CLASS', _userPreferencesProvider2.default).provider('upUserPreferences', frameworkBridge.createDeprecatedServiceProviderFactory('upUserPreferences', 'upUserPreferencesApi', 'UP_USER_PREFERENCES_PROVIDER_CLASS', 'upWebApiConfiguration', 'upWebApiAuth')).config(frameworkBridge.createServiceDecoratorConfigBlock('upUserPreferences', _userPreferencesService2.default)).constant('UP_USER_PREFERENCES_API_PROVIDER_CLASS', _userPreferencesProvider2.default).provider('upUserPreferencesApi', frameworkBridge.createProviderFactory('UP_USER_PREFERENCES_API_PROVIDER_CLASS', 'upWebApiConfiguration', 'upWebApiAuth')).config(frameworkBridge.createServiceDecoratorConfigBlock('upUserPreferencesApi', _userPreferencesService2.default)).name;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = __webpack_require__(1);

var _angular2 = _interopRequireDefault(_angular);

var _angularApiCore = __webpack_require__(2);

var _angularApiCore2 = _interopRequireDefault(_angularApiCore);

var _angularWebApiConfigurationService = __webpack_require__(4);

var _angularWebApiConfigurationService2 = _interopRequireDefault(_angularWebApiConfigurationService);

var _angularWebApiAuthService = __webpack_require__(3);

var _angularWebApiAuthService2 = _interopRequireDefault(_angularWebApiAuthService);

var _userQtService = __webpack_require__(17);

var _userQtService2 = _interopRequireDefault(_userQtService);

var _userQtProvider = __webpack_require__(33);

var _userQtProvider2 = _interopRequireDefault(_userQtProvider);

var _frameworkBridgeAngular = __webpack_require__(6);

var _frameworkBridgeAngular2 = _interopRequireDefault(_frameworkBridgeAngular);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var frameworkBridge = new _frameworkBridgeAngular2.default();
/* eslint-disable no-invalid-this */

exports.default = _angular2.default.module('up.webApi.userQt', [_angularApiCore2.default, _angularWebApiConfigurationService2.default, _angularWebApiAuthService2.default]).constant('UP_USER_QT_PROVIDER_CLASS', _userQtProvider2.default).provider('upUserQt', frameworkBridge.createDeprecatedServiceProviderFactory('upUserQt', 'upUserQtApi', 'UP_USER_QT_PROVIDER_CLASS', 'upWebApiConfiguration', 'upWebApiAuth')).config(frameworkBridge.createServiceDecoratorConfigBlock('upUserQt', _userQtService2.default)).constant('UP_USER_QT_API_PROVIDER_CLASS', _userQtProvider2.default).provider('upUserQtApi', frameworkBridge.createProviderFactory('UP_USER_QT_API_PROVIDER_CLASS', 'upWebApiConfiguration', 'upWebApiAuth')).config(frameworkBridge.createServiceDecoratorConfigBlock('upUserQtApi', _userQtService2.default)).name;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Framework bridge base class. Framework bridges are meant to provide the
 * wiring necessary to bridge the vanilla js library with a specific js framework e.g. Angular 1.x
 */
var FrameworkBridge = function FrameworkBridge() {
  _classCallCheck(this, FrameworkBridge);
};

exports.default = FrameworkBridge;

/***/ }),
/* 75 */,
/* 76 */,
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = __webpack_require__(1);

var _angular2 = _interopRequireDefault(_angular);

var _angularApiCore = __webpack_require__(2);

var _angularApiCore2 = _interopRequireDefault(_angularApiCore);

var _angularWebApiConfigurationService = __webpack_require__(4);

var _angularWebApiConfigurationService2 = _interopRequireDefault(_angularWebApiConfigurationService);

var _angularWebApiAuthService = __webpack_require__(3);

var _angularWebApiAuthService2 = _interopRequireDefault(_angularWebApiAuthService);

var _angularUserPreferencesService = __webpack_require__(72);

var _angularUserPreferencesService2 = _interopRequireDefault(_angularUserPreferencesService);

var _angularRoomService = __webpack_require__(70);

var _angularRoomService2 = _interopRequireDefault(_angularRoomService);

var _angularUserQtService = __webpack_require__(73);

var _angularUserQtService2 = _interopRequireDefault(_angularUserQtService);

var _angularSearchService = __webpack_require__(71);

var _angularSearchService2 = _interopRequireDefault(_angularSearchService);

var _angularNotificationService = __webpack_require__(69);

var _angularNotificationService2 = _interopRequireDefault(_angularNotificationService);

var _angularIdmapService = __webpack_require__(68);

var _angularIdmapService2 = _interopRequireDefault(_angularIdmapService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// services
exports.default = _angular2.default.module('up.webApi', [_angularApiCore2.default, _angularWebApiConfigurationService2.default, _angularWebApiAuthService2.default, _angularUserPreferencesService2.default, _angularRoomService2.default, _angularUserQtService2.default, _angularSearchService2.default, _angularNotificationService2.default, _angularIdmapService2.default]).name;

/***/ })
/******/ ]);
});