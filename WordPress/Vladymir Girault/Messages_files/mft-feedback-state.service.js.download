(function (angular) {

    'use strict';

    angular.module('mftFeedback').factory('MftFeedbackStateService', MftFeedbackStateService);

    MftFeedbackStateService.$inject = [
        'MftFeedbackStorageService',
        'LOGIN_DAYS_DIFF',
        'ACTION_MAX_COUNT',
        'DISMISS_MAX_COUNT',
        'DISSMIS_DAYS_DIFF'
    ];

    function MftFeedbackStateService(
        MftFeedbackStorageService,
        LOGIN_DAYS_DIFF,
        ACTION_MAX_COUNT,
        DISMISS_MAX_COUNT,
        DISSMIS_DAYS_DIFF
    ) {
        function getCurrentTimeStamp() {
            return Math.round(Date.now() / 1000);
        }

        return {
            state: {
                firstLoginTime: null,
                actionsCount: 0,
                lastActionType: null,
                dismissCount: 0,
                dismissTime: null,
                submited: false
            },
            /**
             * Returns state from localStorage if exists or default state object
             * @returns {state|{firstLoginTime, actionsCount, lastActionType, dismissCount, dismissTime, submited}}
             */
            getState: function () {
                var storageState = MftFeedbackStorageService.get();
                if (storageState) {
                    this.state = storageState;
                }
                return this.state;
            },
            /**
             * Saves current state to the localStorage
             */
            setState: function () {
                MftFeedbackStorageService.set(this.state);
            },
            /**
             * Sets submitted value and saves state
             */
            setSubmitted: function () {
                this.getState();
                this.state.submited = true;
                this.setState();
            },
            /**
             * Sets dismissed time, increases count of dismisses and saves state
             */
            setDismissed: function () {
                this.getState();
                this.state.dismissCount++;
                this.state.dismissTime = getCurrentTimeStamp();
                this.setState();
            },
            /**
             * Checks whether is set login time, if no, sets it and saves state
             */
            setLoginTime: function () {
                this.getState();
                if (this.state.firstLoginTime) {
                    return;
                }
                this.state.firstLoginTime = getCurrentTimeStamp();
                this.setState();
            },
            /**
             * Adds current action to the state if it's possible
             * @param actionType
             * @returns {boolean}
             */
            addAction: function (actionType) {
                this.getState();
                if (!this.checkLoginDiff()
                    || this.state.submited
                    || this.state.dismissCount > 0
                    || this.state.lastActionType === actionType
                    || this.state.actionsCount >= ACTION_MAX_COUNT) {
                    return false;
                }
                this.state.actionsCount++;
                this.state.lastActionType = actionType;
                this.setState();
                return true;
            },
            /**
             * Returns true if current time more than 2 days from last login
             * @returns {boolean}
             */
            checkLoginDiff: function () {
                this.getState();
                if (this.state.firstLoginTime) {
                    var diff = (getCurrentTimeStamp() - this.state.firstLoginTime) / 86400; //86400 is seconds in day
                    return diff >= LOGIN_DAYS_DIFF;
                }
                return false;
            },
            /**
             * Returns true if current time more than 7 days from last dismiss
             * @returns {boolean}
             */
            checkDismissDiff: function () {
                this.getState();
                if (this.state.dismissTime) {
                    var diff = (getCurrentTimeStamp() - this.state.dismissTime) / 86400; //86400 is seconds in day
                    return diff >= DISSMIS_DAYS_DIFF;
                }
                return false;
            },
            /**
             * Checks whether the criteria is met for show modal dialog
             * @returns {boolean}
             */
            isNeedShowModal: function () {
                this.getState();
                return this.state.actionsCount >= ACTION_MAX_COUNT
                    && (!this.state.submited
                        && (this.state.dismissCount === 0
                            || (this.state.dismissCount < DISMISS_MAX_COUNT && this.checkDismissDiff()))
                    );
            }
        };
    }
})(angular);