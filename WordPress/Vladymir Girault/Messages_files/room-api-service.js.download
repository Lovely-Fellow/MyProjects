define(["./room"],function(e){"use strict";e.factory("eoRoomApi",["$interval","$q","$log","tlRoom","upRoomApi","upDashMetrics","eoDashContext","eoRetry",function(e,t,o,r,n,a,c,i){var l={upRoomApi:{service:n,enabled:function(){return c.webApiEnabled()}},tlRoom:{service:r,enabled:function(){return!0}}},s=["upRoomApi","tlRoom"],h=function(e){var t=l[e];t.healthWatch||(t.healthWatch=i.create(function(){return console.log('Running healthcheck on "%s" transport layer',e),t.service.healthcheck()},{minWait:1e3,maxWait:36e5,maxAttempts:15,scale:1e3,randomizeSlots:!0}),t.healthWatch.try(1e3).then(function(){t.healthWatch.cancel(),delete t.unhealthy,delete t.healthWatch,console.log('Transport layer "%s" has recovered.',e)}))},u={getRoom:function(e,r){r=r||0;var n;try{if(s[r]&&l[s[r]]){var c=s[r],i=l[c];if(!i.enabled())return u.getRoom(e,++r);if(i.unhealthy)return u.getRoom(e,++r);var m="getRoomUsing"+c.charAt(0).toUpperCase()+c.substr(1);return console.log("Getting Room using %s.getRoom",c),a.startMetric(m),i.service.getRoom(e).then(function(e){return a.endMetric(m),e},function(o){a.count(m+"Failure"),a.endMetric(m),i.unhealthy=!0,h(c);var n=s[r+1];return n?(console.warn(c+"#getRoom failed. Falling back to "+n),u.getRoom(e,++r)):(console.warn(c+"#getRoom failed. No additional transport layers available. Rejecting request!"),t.reject(o))})}return n="No healthy transport layers are available",o.error(n),t.reject(n)}catch(e){return n='A Javascript error prevented loading a network resource: "'+e.message+'"',o.error(n),t.reject(n)}}};return u}])});